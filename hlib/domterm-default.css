/* Optional - user-overridable styling */

span[breaking="yes"][line="soft"]:before {content: "\2936" "\A"; }
/* Suggested by Tufte CSS - less harsh than pure white. */
div.domterm {
    --background-color: #fffff8;
    --foreground-color: black;
    color: black; background-color: #fffff8; /* fallback if var not handled */
    color: var(--foreground-color); background-color: var(--background-color);
    --dt-bgcolor: var(--background-color);
    --dt-fgcolor: var(--foreground-color);
}
div.domterm[reverse-video] {
    color: #fffff8; background-color: black; /* fallback if var not handled */
    color: var(--background-color); background-color: var(--foreground-color);
    --dt-bgcolor: var(--foreground-color);
    --dt-fgcolor: var(--background-color);
}
div.domterm-spacer {
    background: repeating-linear-gradient(
        45deg,
        #fffff8,
        #fffff8 10px,
        #F4F4FC 10px,
        #F4F4FC 20px
    );
}
/* Tufte CSS suggests: Consolas, "Liberation Mono", Menlo, Courier, monospace
   However, the first four in that list cause some vertical spacing issues,
   including background-color not being full-height.
   Check with tests/256-colors.sh. */
div.domterm-pre { font-family: "DejaVu Sans Mono","Everson Mono",FreeMono,Menlo,Terminal,monospace; }
span[std="input"] { background-color: #FFFFD0 } /* a pale yellow */
span[std="prompt"] { background-color: #E0FFE0 } /* a pale green */
span[std="error"] { color: red; }
span[std="hider"]:hover { background-color: yellow; color: red; cursor: pointer }
div.domterm-show-info {
    bottom: 0px;
    right: 2px;
    padding: 1px 4px;
    border: 2px solid blue;
}

/* FUTURE POPUP
div.domterm-main-popup {
}
div.domterm-main-popup div {
    border:  thin solid black;
}
div.domterm-popup-action:hover {
    background-color: lightblue
}
*/

span[caret="block"][std="input"] {
    color: #fffff8; background-color: black; /* fallback if var not handled */
    background-color: var(--dt-fgcolor); color: var(--dt-bgcolor)'white
}

span[caret="blinking-block"][std="input"] {
    animation: blinking-block 1.5s steps(1) 0s 20;
    color: #fffff8; background-color: black; /* fallback if var not handled */
    background-color: var(-dt-fgcolor); color: var(--dt-bgcolor)'white
}
span[caret="underline"][std="input"] {
    text-decoration: underline
}
span[caret="blinking-underline"][std="input"] {
    animation: blinking-underline 1.5s steps(1) 0s 20;
    text-decoration: underline
}
span[caret][std="input"][value]:after {
    content: attr(value);
}
@keyframes blinking-block {
    0% { }
    30% {background-color: inherit; color: inherit }
    100% {}
}
@keyframes blinking-underline {
    0% {}
    30% { text-decoration: inherit }
    100% {}
}
