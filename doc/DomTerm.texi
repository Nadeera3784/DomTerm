\input texinfo.tex      @c -*-texinfo -*-
@c %**start of header
@setfilename domterm.info
@documentencoding UTF-8
@settitle DomTerm - a terminal emulator and console using DOM and JavaScript

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex pg cp
@codequoteundirected on
@codequotebacktick on

@titlepage
@title DomTerm - a terminal emulator and console using DOM and JavaScript
@end titlepage

@node Top
@top DomTerm

DomTerm is a combined terminal emulator and REPL console using web
technologies - i.e. JavaScript
and @uref{https://en.wikipedia.org/wiki/Document_Object_Model,DOM}:
Users can type commands which
gets sent to an application, which evaluates the command, and displays
the results, typically in some kind of type-script format.

The @code{qtdomterm} application is self-contained terminal emulator
based on DomTerm and QtWebEngine.

This @uref{https://lwn.net/Articles/670062/,LWN article} provides
background, motivation, and a summary of the functionality.

The name ``DomTerm'' refers to that it  works by manipulating the
Document Object Model (DOM) of a browser: the nested structure of elements,
text, and attributes.
(Also, most other appropriate names were already taken...) 

DomTerm is Free Software (open-source)
available at @uref{https://github.com/PerBothner/DomTerm,https://github.com/PerBothner/DomTerm}.

The older @uref{https://github.com/PerBothner/JWebTerminal,JWebTerminal} project
was based on similar concepts, but was mostly written in Java using
@uref{https://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm, Javafx WebView}.

@subheading Why another terminal emulator

@emph{}@image{images/domterm-1}
The goal of this project is to combine two related but
separate tools: a terminal emulator, and a rich-text console,
and do it properly.

There are many terminal emulators, including quite a few written in JavaScript.
However, they generally work with a rectangular grid of characters,
and don't integrate rich text (images, math, variable-width text,
variable-length lines, interaction) well.

There are also various tools designed for REPL-style interaction,
chat clients, etc. Examples include @uref{http://ipython.org/,IPython}
or the the JavaScript console of a web browser.
However, they don't work as terminal emulators, or at best have
limited functonality or require switching modes.

For rich text applications it seems obvious to use web technologies:
DOM and JavaScript.

One goal of this project is a stand-alone terminal emulator application
that techies can use as a day-to-day terminal emulator, and that also
seamlessly provides support for rich text and interaction. That means
an embedded web engine.

The core of the project is a JavaScript package that can be used and
embedded in different modes and applications.

@menu
* Features:: Features and screenshots
* Downloading and building::
* Applications::
* Tips:: Tips and solutions
* To do:: Ideas and projects for DomTerm
* Technical documentation::
@end menu

@node Features
@chapter Features and screenshots

@c The @emph is a dummy to force the @image inside a paragraph
@emph{}
@image{images/domterm-2}
A @strong{full-featured terminal emulator}, like @code{xterm}.
It is mostly compatible with setting @code{TERM=xterm-256color},
as many terminal emulators do.
Here you see the @code{mc} (Midnight Commander) file browser
running in the stand-alone DomTerm application.
@ifdocbook
(Click on image to see the full-size screenshot.)
@end ifdocbook
Emacs (shown later) and GNU readline also work well.

@emph{}@image{images/domterm-polygon-1}
A back-end @strong{can ``print'' images, graphics, and rich text}.
Here you can see evaluating and ``printing''
@code{Paintable} objects, which are graphical objects such as
filled polygons.
from the @uref{http://www.gnu.org/software/kawa/,Kawa} REPL.

The front page screenshot shows ``printing'' HTML for images and rich text.
(The expressions starting with @code{#<} are
@uref{http://www.gnu.org/software/kawa/XML-literals.html,XML literals},
which evaluate to @code{Element} objects. ``Printing'' an @code{Element}
inserts its HTML representation in the DomTerm output.)

The image later (with the yellow circle) shows printing
@uref{https://en.wikipedia.org/wiki/Scalable_Vector_Graphics,SVG}.

@emph{}
@image{images/emacs-in-firefox-1}
The guts of the implementation is portable JavaScript (@code{terminal.js}),
which can be @strong{embedded} in multiple front-ends.
The source includes a stand-alone terminal emulator,
using the embedded JavaFX WebEngine browser.
You can also use the included WebSockets server,
and along with your HTML5 browser of choice.
Here is @strong{Emacs displaying in a FireFox browser window}.

Applications of DomTerm include:
@itemize
@item
A chat/talk window.
@item
A read-eval-print-loop for an interactive scripting language.
@item
A command console.
@item
A terminal emulator.
@end itemize

User @strong{preferences are controlled a CSS stylesheet},
which can be changed by an application.

@strong{Uses a byte-protocol} to communicate with the back-end,
so can run in a browser (using web sockets);
be embedded in an application;
or run as a standard terminal emulator application.

Optional @strong{input editing}.  In @dfn{character mode},
each character is sent to the application, like a traditional terminal.
In @dfn{line mode}, the browser does the editing, and send the input line
to the back-end when Enter is typed.
A history of previous lines is available, accessible
with the Up/Down arrow keys.
@dfn{Automatic mode} switches between character mode and line mode
depending on whether the back-end is in ``@uref{http://www.gnu.org/software/libc/manual/html_node/Canonical-or-Not.html,canonical mode}''.

@emph{}@image{images/domterm-sh-svg}
@strong{Smart line-wrapping}: Remembers which lines were too wide (and thus
were wrapped).
The default style add markers to show when wrapping occurred,
as seen in the nearby screenshot.
Window size re-size will automatically re-do line-breaking.
Copying the selection as text will only include hard newlines.
Reports window resize to applicaton.
(Future: structure-based line-breaking aka pretty-printing.)

You can ``print'' @ref{Hide/show buttons,hide/show buttons},
using certain escape sequences.
The nearby screenshot shows the output of @code{ls -l} being hidden.

Handles Unicode.

Maintains @strong{a clean DOM structure}, and thus @strong{clean HTML export}.

Future: Optional automatic pagination.

@node Downloading and building
@chapter Downloading and building

@subheading Getting the DomTerm source code

The sources are in
a @uref{https://github.com/PerBothner/DomTerm,GitHub repository}.
To download the sources do:
@example
git clone https://github.com/PerBothner/DomTerm
@end example

@subheading Building from source

The core part of DomTerm is the JavaScript code @code{terminal.js},
which defines the @code{DomTerm} class.
You can use @code{terminal.js} in your own application.
However, there is also some utility code, include standalone
terminal emulator applications.

The recommended terminal emulator program is @code{qtdomterm}.
It uses the C++-based @uref{https://www.qt.io/,Qt toolkit}
including @uref{https://wiki.qt.io/QtWebEngine,QtWebEngine}.
Needed packages are included with Fedora 24.
(Reports of attempt to build or use qtdomterm on other platforms
would be welcome.)

Alternatively,
you can use easier-to-install Java-based terminal emulators.

Building the sample applications and libraries is a two-part process:

First run the @code{configure} script:
@example
./configure @var{configure-options}
@end example
where @var{configure-options} can be:
@table @code
@item --with-java_websocket
@itemx --with-java_websocket=/path/to/java_websocket.jar
Build a WebSocket server, using
@uref{https://github.com/TooTallNate/Java-WebSocket/,Java WebSockets},
which allows using any modern browser as a front-end.
This option is enabled by default.
The default jar path references the @code{java_websocket.jar}
bundled with the DomTerm sources.
@item --enable-pty
Compile support for PTYs (pseudo-teletypes).
This allows character mode: sending individual characters (rather than lines)
from the front-end to the back-end.
This is the default, except on Windows (which doesn't support PTYs).
@item --with-javafx[=@var{library-name}]
Use JavaFX to run standalone applications.
The @code{@var{library-name}} if specified is either the @code{JAVA_HOME}
or a path to @code{jfxrt.jar}.
@item --without-java
Disable building anything that depends on Java.
@item --with-qtwebengine
Use Qt and @uref{https://wiki.qt.io/QtWebEngine,QtWebEngine}
to build @code{qtdomterm}, an advanced front-end that
supports multiple tabs, screen re-sizing, and other nice features.

For this you need the Qt development tools including QtWebEngine installed.
@end table

Then just:
@example
make
@end example

To test it, you can try either:
@example
bin/domterm
@end example
or
@example
bin/qtdomterm
@end example
Either starts up a useable terminal emulator in a fresh window.
The former starts up a @code{bash} shell, running in a PTY,
with a WebSocket server.  It also starts a stripped-down Firefox window,
with no location bar or a menubar, using that for the input and output
of the @code{bash} shell.
The latter (obviously) runs qtdomterm.

The @code{qtdomterm} executable has no external dependencies
(besides the Qt libraries), and you can copy to wherever you want it.

@node Applications
@chapter Applications

The core of DomTerm is the JavaScript @code{terminal.js},
but we also provides a few wrappers and applications that make use of it.

@menu
* qtdomterm application::
* domterm script::
* dtstyle - Changing styles::
* Utility scripts::
@end menu

@node qtdomterm appliction
@section The qtdomterm terminal emulator

You start and use @code{qtdomterm} just like other
terminal emulators such as @code{xterm}.
In addition to the regular DomTerm features (colors, stylesheets,
mouse-handling, embedded graphics, etc)
it also supports multiple tabs and windows, convenient text zooming,
and remote debugging,

@display
@code{qtdomterm} [@var{options}] [[@code{-e}] @var{command} @var{argument} ...]
@end display

This runs the @var{command}, with the specified @var{argument}s,
in a sub-preocess using a pty.
The @var{command} defaults to the value of the @code{SHELL}
environment variable.

The @var{options} include:
@table @asis
@item @code{--connect} @var{host}@code{:}@var{port}
This does not start an inferior @var{command}.
Instead it connects to an already-running WebSocket server,
as you might start with @code{domterm --port @var{port} [@var{command}]}.

This is one way to run commands on a remote server.

@item @code{--help}
Print a help message with options, and then exits.
@item @code{--version}
Print the version number, and then exits.
@item @code{--stylesheet} @var{file}
@itemx @code{-S} @var{file}
Specify the name of a CSS stylesheet file.
This file is used to style @emph{both} the DomTerm elements
and the Qt user interface ``chrome''.  See below.
@item @code{--remote-debugging-port=@var{debug-port}}
Allow @uref{http://doc.qt.io/qt-5/qtwebengine-debugging.html,remote debugging}
(using a Chromium-based browser, such as Google Chrome).
This is useful for debugging DomTerm itself, as well as any
inspecting any unusual HTML, CSS, or JavaScript you might throw at it.
@end table

@subheading Changing styles

If you select @code{Edit} / @code{Preferences} / @code{Appearance} you can
select a CSS stylesheet file, as well as additional style rules.
This can be used to customize the appears of the terminal window.
These preferences are saved.  If the file changes, it is automatically reloaded.

The command-line option @code{--stylesheet} overrides the
preferences (both the stylesheet file and the additional rules),
which are ignored.
The specified stylesheet is also used for Qt widget ``chrome'' - i.e.
not the contents of the terminal window, but everything else.

Suppose we start qtdomterm with the option @code{--stylesheet=mystyles.css}
abd the file @code{mystyles.css} contains:

@example
div.domterm @{ background-color: #FEE @}
div.domterm span[std="input"] @{ background-color: #DDF @}
QMenu @{ color: green; @}
@end example

The two @code{div.domterm} rules apply to the DomTerm window.
The first rule sets the general background to a light pink,
while the second rule sets to that to input lines to a link blue.
The third line line applies to QMenu widgets used in the
user interfaces: It specifies to use green for menu text.
See @uref{http://doc.qt.io/qt-5/stylesheet-examples.html, more examples}.

@node domterm script
@section The domterm terminal emulator command

The @code{domterm} script (in the @code{bin} directory) is a convenient
way to start up a standalone terminal emulator.
It depends on Java, but does not depend on Qt.
By default it runs a shell (@code{bash}), but there are a number of options.

@display
@code{domterm} [@var{frontend}] [@var{backend-arguments}]
@end display

The @var{frontend} argument specifies the front-end or user interface
application - i.e. some kind of browser.
The @var{backend-arguments} specify which command is run and how it is run.

@subsubheading Front-end (user interface) options

The @var{frontend} is one of the following:
@table @asis
@item @code{--browser}
@itemx @code{--browser=}@var{program}

Creates a new window or tab in your preferred desktop browser.

If @var{program} is specified, instead creates a window
in the specified browser, where @var{program} is the name
of a browser program that takes a single URL argument.

The window is created after starting up a backend, and a WebSocket server
for the browser to listen to.

@item @code{--firefox}
This is currently the default.
The user interface is a “chrome-less” Firefox browser window, with
a custom menubar, and custom context menu (what you get by right-clicking).
The script also starts up a WebSocket server, and connects them.

This is potentially a very nice terminal emulator,
though it is based on @uref{https://en.wikipedia.org/wiki/XUL,XUL},
which is being phased out.
@item @code{--qtdomterm}
@itemx @code{--qtwebengine}
Either option (they do the same thing)
runs @code{qtdomterm} with the @code{--connect} option,
after starting up a websockets server.

@item @code{--chrome}
This is very similar to using Firefox, but uses the Google Chrome browser.
The latter is started using the @code{--app=} option,
so you get a fresh chrome-less window (with no menubar or toolbar).

This works well and the performance is good.
This method provides no menubar or context-menu customization (so far).

@item @code{--javafx}
This uses Java and the JavaFX WebView browser component (based on WebKit).
It needs OpenJDK 1.8 (or JDK 7 with JavaFX) but should otherwise
not need anything else.  Instead of a WebSocket server,
it uses JavaFX's Java/JavaScript bridge.

The UI (written in Java using the JavaFX toolkit) is minimal,
but right-clicking will bring up a popup menu.
This supports copy and paste, as well as
switching the input mode between line, character, or auto mode.

There are some glitches, and since JavaFX is not being actively
developed, this port is not a priority.

@item @code{--port} @var{portnum}
Start a WebSocket server, listening on the specified @var{portnum}.
(A @var{portnum} of 0 lets the system choose an available port,
which is printed out.  The default for @code{repl-client.html} is @code{8025}.)

No front-end is started automatically.
Instead, you load @code{repl-client.html} in your preferred web browser,
and it connects to the server.
If the server is listening on port @var{portnum} (rather than port 8025),
browse to @code{file:///path/to/DomTerm/repl-client.html?ws=//localhost:@var{portnum}}.

This allows you to use "any" modern browser as the client.
This is nice for development, as you can use the browser's
JavaScript console and debugger, DOM inspector, and so on.
The browser talks to server using WebSockets,
which modern browsers have built-in.
@end table

@subsubheading Back-end (command) options

The @var{backend-arguments} are one of:
@display
[@code{--pty}|@code{--pipe}|@code{-e}] [@var{command} @var{arg}...]
@code{--class} @var{classname} @var{arg}...
@end display

You can specify some other @var{command} and @var{arg} in
place of the default @code{/bin/bash}.

Specifically:

@table @asis
@item @code{-e} [@var{command} @var{arg}...]
@itemx @code{--pty} [@var{command} @var{arg}...]
This is the default on Unix-like systems (MacOs, GNU/Linux, BSD).
It runs @var{command} under a PTY.
Communication is by default character-by-character, but
can also be line-based.
@item @code{--pipe} [@var{command} @var{arg}...]
The input/output of the @var{command} is connected to DomTerm using
pipes.  Data communication is normally on a line-by-line basis.
(It is also possible to send single keystroke message.)
The implementations uses a Java @code{Process} object.
This should work on Windows, though it has not yet been tested.

@item @code{--class} @var{classname} @var{arg}...
This runs the @code{main} method of a specified Java class,
but with the standard streams (input, output, and error)
re-bound to a DomTerm window.

@example
CLASSPATH=@var{my-application.jar} domterm --class @var{my.ClassName} @var{arg}...
@end example

@end table

@node dtstyle - Changing styles
@section dtstyle - Changing styles

The @code{dtstyle} command is useful for managing and
modifying the currently active stylesheets.
It takes various options.

@table @asis
@item @code{--add-rule} @var{style-rule}

If called for the first time, create and install a temporary
stylesheet.
This temporary stylesheet has a @code{name} attribute
with the value @code{"(temporary-styles)"}.
Add the @var{style-rule} to the temporary stylesheet.

For example, to change the background color to pink:
@example
$ dtstyle --add-rule "div.domterm @{ background-color: pink @}"
@end example

Inverse video:
@example
$ dtstyle --add-rule "div.domterm @{ background-color: black; color: white @}"
@end example

Setting a background image:
@example
$ dtstyle --add-rule "div.domterm @{background-image: url('file:/usr/share/backgrounds/gnome/Mirror.jpg')@}"
@end example

Changing font size:
@example
$ dtstyle --add-rule "body @{ font-size: 14pt @}"
@end example

@item @code{--load-stylesheet} @var{name} @var{filename}

Replace or create a new stylesheet with the given @var{name}.
The content of the stylesheet are read from the given @var{filename}.
If the @var{filename} is @code{-} then standard input is used.

The @var{name} is used to set the non-standard @code{name} attribute
of the created @code{<style>} element.  If there is an existing stylesheet
with a matching @code{name} attribute, then that stylesheet is replaced;
otherwise a new stylesheet is created.
The @var{name} attribute is displayed by the @code{dtstyle --list} command.

@item @code{--list}
List on the standard output the set of stylesheets associated with
the domterm document, one per line:

@example
$ dtstyle --list
0: enabled  - "style/domterm-core.css"
1: enabled  - "style/domterm-standard.css"
2: enabled  "Default DomTerm styling" "style/domterm-default.css"
3: enabled  - "(temporary-styles)"
@end example
After the sequence number, either @code{enabled} or @code{disabled}
specified whether the stylesheet is disabled.
If the stylesheet has a @code{title}, if is shown next (in json format);
otherwise @code{-} is printed.
If the stylesheet has the @code{href} attribute, it is shown next
(in json format);
otherwise, if it has the @code{code} attribute, that is shown;
otherwise @code{-} is printed.

@item @code{--print} @var{index}
Print out the style rules of the specified stylesheet,
which is an @var{index} in the @code{--list} output.

@item @code{--enable} @var{index}
@itemx @code{--disable} @var{index}
Disable or enable the specified stylesheet.
A @var{index} is an integer index into the
list as shown by @code{--list}.

@example
$ dtstyle --disable 2
@end example

@end table

@node Utility scripts
@section Utility scripts

@subsubheading hcat: Print HTML

A simple script for embedding HTML content - just pipe to to stdin:

@example
echo 'E = mc<sup>2</sup>' | hcat
@end example
displays: @code{E = mc@sup{2}}.

@subsubheading imgcat: Send an image file to DomTerm

This script ``prints'' the contents of the named image file to domterm.
This uses a ``@code{data:}'' URI with the file contents sent directly to domterm, so it works when working remotely.

@example
@code{imgcat} [@code{-@var{n}}] [@code{--@var{attrname}=@var{attrvalue}}]... @var{filename}
@end example

The @var{filename} must be a file that can be displayed
by an HTML @code{<img>} element, most commonly a @code{png} or @code{jpg} file.

@table @asis
@item @code{-@var{n}}
Do not append a newline.
@item @code{--@var{attrname}=@var{attrvalue}}
Specify the given attribute; for example: @code{--height=200}.
Valid @var{attrnames} are the following, which
are specified in the HTML specification:
@code{alt}, @code{longdesc}, @code{height}, @code{width}, @code{border}, @code{hspace}, @code{vspace}, @code{class}.
@end table

@node Tips
@chapter Tips and solutions

This page covers various topics, and may evolve to
a Frequently-Asked-Questions page.

Notes about ``@emph{Front-end support}'' discuss how
different front-ends may support some features differently.

@subheading Copy and Paste

In character mode the ``standard'' keyboard shortcuts for copy and paste
(ctrl-C and ctrl-V) are sent to the backend program.
So instead DomTerm uses ctrl-shift-C to copy the selection to the clipboard,
and ctrl-shift-V to paste the contents of the clipboard.

Some front-end also have menu entries for copy and paste.

@emph{Front-end support}:
Middle-button paste (i.e. cliicking the middle button pastes the
contents of the @emph{selection}, rather than the clipboard)
works on qtdomterm, and chrome-based browsers.
It does not work on the Firefox/XUL application or in a Firefox
browser window.

@subheading Save the console contents as HTML

Use the keyboard shortcut ctrl-shift-S to save the contents
of the DomTerm console as an HTML file.
Both qtdomterm and the Firefox/XUL front-end also offer menu entries for this.

The saved file should be viewed with various css stylesheet
files in the @code{hlib} subdirectory.  You can create a symlink
to the @code{hlib} subdirectory in the DomTerm distribution.
The saved file also optionally makes use of some JavaScript,
in the same directory.
The JavaScript isn't essential, but it enables features like
hide/show buttons.

Images will preserve their URLs, so relative URLs may need to be fixed.
``Embedded'' images using a @code{date:} URL (including those
loaded with the @code{imgcat} program) will be saved embedded,
and Just Work.

The resulting file is actually an XHTML file, so you can use
XML tools to extract parts from or transform the output.

@emph{Front-end support}: The qtdomterm and the Firefox/XUL applications
bring up a file chooser, and let you save the file in any writable directory.
Other front-end bring up a prompt pop-up and only allow
saving to the Downloads area.
The JavaFX front-end currently does not support saving.

Note that if DomTerm is running in a browser window,
the browser's @code{Save page as ...} command is not useful.
It will save the original bare web page, before any DomTerm interactions
or other JavaScript modification.

@subheading Changing appearance with CSS stylesheets

You can @code{@ref{dtstyle - Changing styles,dtstyle}} application
in a DomTerm window to change its appearance.

On @code{@ref{qtdomterm appliction,qtdomterm}} you can use
the @code{--stylesheet} option
or the @code{Edit} / @code{Preferences} / @code{Appearance} menu entry.

@subheading Session names and session-specific styles

Each ``session'' (terminal window) has a name,
which by default has the form @code{"domterm-@var{N}"}
where @var{N} is an integer.
The session name is usually shown in the window title bar,
in the format @code{"@var{window-title} [@var{session-name}]"}.

You can change the session name by ``printing'' a certain escape sequence.
For example (using bash):
@example
echo -en "\e]30;@var{session-name}\007"
@end example

The @code{qtdomterm} application will give each ssession a
fresh name of the form @code{domterm-@var{N}}.
The Java WebSockets server will do the same.

The session name is used to set the @code{name}
attribute of the top domterm element,
so you can use it to select differnt rules for different sessions.
For example the following selects different background colors.

@example
div.domterm @{ background-color: #FFE @}
div.domterm[name="domterm-1"] @{ background-color: #FEE @}
div.domterm[name="domterm-2"] @{ background-color: #EEF @}
@end example

@node To do
@chapter Ideas and projects for DomTerm

@subheading Basic terminal emulator functionality

@subsubheading Make robust enough for actual use

This means supporting all the ``base'' functionality
of xterm as implemented by terminal emulators that
set @code{TERM} tp @code{xterm-256color}.
At this point we're pretty close to that.

Error recovery and state transitions should follow
@uref{http://www.vt100.net/emu/dec_ansi_parser,this}.

Other terminal emulators:

@uref{https://github.com/chjj/term.js/,term.js}
and the new fork @uref{https://github.com/sourcelair/xterm.js,xterm.js}
have quite complete terminal emulation and even better documentation.
Howewver, it's based on a simple 2-d array (char value and attributes
encoded as an integer).

@subsubheading Document any discrepances from xterm and ANSI

While implementing all of the
@uref{http://invisible-island.net/xterm/ctlseqs/ctlseqs.html,features of xterm}
is probably not feasible, we should at least have a list of
anything we don't implement, or implement differently from xterm.

See also the @uref{http://www.ecma-international.org/publications/standards/Ecma-048.htm,ECMA-48 standard}.

@subsubheading  Use vttest for testing

The xterm distribution includes @uref{http://invisible-island.net/vttest/,vttest}.
Many of the tests work now, but there are more worth fixing.

@subsubheading Support Sixel graphics

@uref{https://en.wikipedia.org/wiki/Sixel,Sixel} is an old raster
image format supported by DEC terminals and some programs, including xterm.
It is interesting because some programs (such as gnuplot) can use Sixel
to interleave graphics and text, without requiring separate windows.

This @uref{http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/,JavaScript utility} may be useful in converting raster data (post-sixel-decoding) to PNG, which could the be displayed with a @code{data:} URI.
Alternatively, a @code{<canvas>} element could be used.

@subsubheading Improve copy and paste

Handle exporting html to clipboard.

Fix paste in line-editing mode.

Think about how to do multi-line paste.

@subsubheading Speed up line-breaking

While DomTerm is quite responsive, dumping a lot of output
(such as @code{cat}'ing a large file) is very slow.
The biggest problem is line-breaking: checking
(in the @code{_breakText} procedure) whether a long-line needs to be wrapped.
The problem is we call @code{Node.offsetLeft} too many times.
This is expensive because it forces the browser to layout the
DOM tree as it currently is - and then we add more elements,
call @code{offsetLeft}, which forces the browser to do the whole thing again.
The calls to @code{offsetLeft} need to be batched - @emph{after} we have
inserted as many lines as possible.

@subheading Improve standalone terminal emulator

Handle saving and truncating scrolled-out output.

@subheading Support other embeddable browsers

Some toolkits to explore for integrated browser/application:
@itemize
@item
@uref{https://bitbucket.org/chromiumembedded/cef,Chromium Embedded Framework}
@item
@uref{http://lwn.net/Articles/647921/,Mozilla Servo}
@item
@uref{http://atom.io,Atom/Electon}
A possible start is @uref{https://atom.io/packages/term2,term2}.
@item
@uref{http://nwjs.io/,NW.js} (formerly node-webkit).
@item
@uref{http://webkitgtk.org/,WebKitGtk+}
@end itemize

@subheading Readline style hooks and improvements

The idea is the line-editing mode would provide the
functionality of readline or similar programs.

@subsubheading Improved history support in line-editing mode

While DomTerm has basic history support (previous/next line),
we should implement searching (ctrl-R in readline),
as well as saving the history (in local storage).

@subsubheading Readline hooks to recognize when it's running under DomTerm

The idea is readline would delegate basic line editing
(and re-display) to DomTerm, while DomTerm would call back
to readline for command completion, history, etc.

This has a couple of advantages over plain readline:
One is to have mousing actually work (i.e. no more
readline not being able to move the cursor on mouse-clicks).
Another advantage is local editing, which is a benefit
over slow links (such as satellites) or when you don't
want to interrupt the server needlessly.

Readline should at least behave as if the screen width were infinite,
delegating line-wrapping to DomTerm.

@subsubheading Customizable key sequences, as in readline

@subheading Builtin pager

Implement a @code{less}-style pager,
similar to the way Emacs @code{term} mode does it.

When enabled, after a full screen of output without user interaction,
further output is queued until the user requests more output.
This should be integrated with searching in the buffer.

@subheading Pretty-printing

Add hooks for Lisp-style pretty-printing.  The idea is a pretty-printer
would emit groups and "text blocks" and DomTerm would do line-breaking.
Specifically, lines would be re-broken on window size change.

@subsubheading Integrated pagination (like more/less)

Emacs term mode does this.

@subsubheading Graphics hooks

Allow processes to send HTML and graphics to DomTerm.
See some previous work: http://per.bothner.com/blog/2007/ReplPane/

@subsubheading Event forwarding to inferior

A process may "print"/paint graphics with event handlers.
For example a button.  On clicking the button, the click
should be bundled as an event objects sent back to the inferior.

@subheading Saved notebooks

A "notebook" is a saved (and potentially executable)
representation of a session.

IPython/Jupyter has a
@uref{https://ipython.org/ipython-doc/3/notebook/nbformat.html,JSON encoding for "notebooks"}.
This is flexible and extensible, but requires special tools.

The DomTerm notebook format should just be a simple html page.
Essentially a serialization of the DOM.  The page may include
some generated header information and metadata.  It may include
references to JavaScript that would allow former execution,
as well as viewing actions (like hide/unhide, wrap-to-fit, etc).
This references should be simple and relative, so the actual
JavaScript loaded can depend on context.

The format must be XML-compatible (XHTML) so it can be
parsed by XML tools such as XSLT.

Specific format TBD.

The html page must be viewable and look reasonable in a browser even
if JavaScript library or style files are missing or JavaScript is
disabled.

A notebook may be include additional resources in other files,
such as images.  If notebook  consists of multiple files,
they should be bundled in a zip archive (like LibreOffice does).

Tools to convert to and from Jupyter format would be nice,
so we should avoid gratuitous conceptual incompatibility.

@subheading Detachable and remote sessions

Detachable sessions means that a front-end
can disconnect from a session, while the session (child process) persists.
The same or a different front-end can later re-attach to the session
The problem is remembering and being able to re-create the front-end state.
Handling explicit detach can be done by having the front-end serialize
the important aspects of state, and send it back to the back-end.
On a re-attach, the back-en can send the saved front-end state back
to the front-end.

However, this doesn't handle unexpected detaches, as when the
connection dies.  To support this, the back-end has to know the
critical parts of the front-end state.  This means the back-end
has to track the front-end state by simulating the actions of
the various escape sections.  One way to do that is to use a
@uref{https://gist.github.com/evandrix/3694955#file-readme-md,``headless'' web server}, such as @uref{http://htmlunit.sourceforge.net/HtmlUnit}
or (the presumably more heavy-duty) @uref{http://phantomjs.org/,PhantomJS}.

@node Technical documentation
@chapter Technical documentation

@menu
* DOM structure::
* Wire byte protocol::
* The DomTerm JavaScript class::
* Architecture notes::
@end menu

@node DOM structure
@section DOM structure

The JavaScript code works by DOM manipulations of
a top-level @code{div} element, and assume that element
has a certain well-behaved form.

@table @asis
@item @var{domtern-element} ::= @code{<div class="domterm">} @var{domterm-toplevel} @code{</div>}
A top-level ``DomTerm window'' is a @code{<div>} element
whose @code{class} is @code{domterm}.

@item @var{domterm-toplevel} ::= @var{internal-div-elements} @var{block-content}@sup{*}

You don't need to create @var{domterm-toplevel} - it is created and managed by
DomTerm, based on data from the back-end.

Currently, the @var{block-content} is a single
@code{<div class="interaction">}
with an @code{id} attribute of the form @code{@var{xxx}_main}.
This is the xterm ``normal screen buffer''.

More structure will be supported, for example individual @code{<div>}
to wrap each command and its output.

@item @var{internal-div-elements}
One or more invisible @code{<div>} elements used by the implementation.

@item @var{block-content} ::= @var{logical-line} | @code{<div>} @var{block-content}@sup{*} @code{</div>} | @var{opaque-line}

@item @var{logical-line} := @code{<div class="domterm-pre">} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
  | @code{<pre>} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
  | @code{<p>} @var{line-content}@sup{*} @var{hard-nl} @code{</p>}
A @var{logical-line} is one or more ``rows'' (separated by @var{soft-line}s),
consisting of character and other @code{inline} data,
ending with @var{hard-nl} representing an explicit newline.

The intent is that @code{<div class="domterm-pre">}, @code{<pre>} and @code{<p>} are treated logically
the same, but @code{<div class="domterm-pre">} (or @code{<pre>}) will be monospace,
while @code{<p>} can use other fonts and styling.
The line-breaking algorithm uses the width of the line,
not the number of characters, so it should also work for @code{<p>} elements.

Normal terminal output will create @code{<div class="domterm-pre">} elements,
rather than @code{<pre>}, because @code{Copy} command on some browsers (at least
current Firefox) adds extra newlines.

@item @var{line-content} ::= @var{text} | @code{<span>} @var{line-content}@sup{*} @code{</span>} | @var{soft-nl} | @var{input-line} | @var{other-content}

@item @var{hard-nl} ::= @code{<span line="hard">&#A;</span>}
An explicit newline. Has a @code{"\n"} text node as its sole child.

@item @var{soft-nl} ::= @code{<span line="soft"></span>}
An implicit newline, inserted by DomTerm when a line overflows.
Has no explicit text content, but CSS adds a @code{"\n"}
as @code{before} content.
CSS by default also add a continuation arrow.

@item @var{input-line} ::= @code{<span id="input1" std="input" contenteditable="true">} @var{text} @code{</span>}
The location of the input cursor.
In char-mode the @var{text} is empty.  In line-mode contains
the current input line.  Also used for previous input lines,
but without @code{contenteditable} set.
Referenced by the @code{inputLine} field of the DomTerm object.

@item @var{opaque-line}
A non-empty block-level element that isn't navigable
at the level of rows and columns.
For example a @code{<table>}.
It is treated as a single empty line.
@end table

@anchor{command group}
@subsubheading Command groups

A @dfn{command group} is the set of input and output lines for a single
user command.

@table @asis
@item @var{command-group} ::= @code{<div class="command-group">} @var{command-input-line}@sup{+} @var{command-output}@sup{?} @code{</div>}
Usually there is a single @var{command-input-line},
but there may be more than one if there are continuation lines.
@item @var{command-input-line} ::= @code{<pre>} @code{<span std="prompt">} @var{prompt-text} @code{</span>} @code{<span std="input">} @var{input-text} @code{</span>} @code{</pre>}
A @var{command-input-line} is @code{logical-line} which (at least normally)
has the form of a prompt followed by the typed input command.
@item @var{command-output} ::= @code{<div class="command-output">} @var{block-content}@sup{+} @code{</div>}
The output from the command.
Normally, each @var{block-content} is a @var{logical-line}.
The @code{<div class="command-output">} element may have the
@code{domterm-hidden} attribute if it is hideable.
@end table

@anchor{Hide/show buttons}
@subsubheading Hide/show buttons

A hide/show button is a clickable toggle ``button'' that controls
whether certain ``associated output'' is shown or hidden.
For example the ``associated output'' of a shell command could be the
set of output lines from the command.  Initially, the output is in
the shown state, and the button displays a ``hide'' icon.
Clicking the button will hide output lines, as well as changing the
button to display a ``show'' icon.  Clicking the button again
changes the icon to the ``hide'' icon and unhides the output lines.

@table @asis
@item @code{<span std="hider"} [@code{domterm-hiding="true"} or @code{"false"}]@code{>} @var{hide-icon} @code{</span>}
This is a hide/show button.  The @var{hide-icon} is either empty or one of
the strings with odd-numbered index in DomTerm's
@code{showHideMarkers} property.
The value of the @code{showHideMarkers} property is an array of strings,
where the even-numbers elements are ``show'' icons, and
the following odd-numbered elements are the corresponding ``hide'' icons.
It is suggested (but not required) that these icons be single
graphic characters.
Good choices are @code{"\u25B6"} (@code{@U{25B6}} ``black right-pointing triangle'')
for ``show'', and
@code{"\u25BC"} (@code{@U{25BC}} ``black down-pointing triangle'') for ``hide''.

The attribute @code{domterm-hiding} must be @code{"true"}
or @code{"false"}; if missing it defaults to @code{"false"}.
Its value is flipped on each click,

If you are unsatisfied with the existing icon choices you can
either set @code{showHideMarkers} to other strings,
or you can use CSS to change the look of the icons.
For example to use @code{[-]} and @code{[+]} use these CSS rules:
@example
span[std="hider"][domterm-hiding="true"]:after @{ content: "[+]" @}
span[std="hider"]:after @{ content: "[-]" @}
@end example
In this case, you probably want the @var{hide-icon} text in
the @code{<span>} to be empty.
@end table

The ``associated output'' for a hide/show button
is the set of sibling elements following the button,
as well as sibling elemets of the button's parent
(assuming that parent is a @code{<pre>} or @code{<p>} element).
Only elements that have the @code{domterm-hidden} attribute are affected.
Hiding is done by changing the value the @code{domterm-hidden} from
@code{"false"} to @code{"true"}; un-hiding changes it back to @code{"false"}.
This is using a CSS style rule that sets the @code{display} property
of an element to @code{none} when @code{domerm-hidden} is @code{true}

A future extension would allow @emph{lazy} associated output:
The initial state is hidden, and the back-end does not provide
the output until it is requested, by clicking the hide/show button.
Lazy output is useful for displaying and inspecting large
(or even infinite) data structures, such as as a directory hierarchy
or a complex object graph.

@subsubheading Alternate screen buffer

Xterm supports an ``alternate screen buffer'' which is used
by character-based programs like emacs.
Switching to the alternate buffer creates a new @code{<div class="interaction>},
with an @code{id} attribute of the form @code{@var{xxx}_alternate}.
It is the sibling of the normal screen buffer
(with @code{id} attribute of the form @code{@var{xxx}_normal}).
This @code{<div>} contains one or more @var{logical-line}s.
Returning to the normal screen deletes the @code{<div>} for the
alternative screen, along with all of its contents.

@node Wire byte protocol
@section Wire byte protocol

DomTerm mostly handles standard @uref{https://en.wikipedia.org/wiki/ANSI_escape_code,ansi/xterm escape sequences}.
This section documents DomTerm-specific extensions.
(@emph{Future:} We should also document what xterm features aren't implemented.)

@strong{The following are preliminary code sequences,
which may change based on experience and feedback.}

@emph{Notation:}
Literal characters are written as quoted string literals with
escape sequences as understoof by bash's @code{echo -e}.
Specifically @code{"\e"} is an escape; @code{"\a"} is alert (bell);
@code{"\xHH"} is the 8-bit characters whose value is HH (hexadecimal).

@subsection Special sequences sent by back-end and handled by DomTerm

@table @asis
@item @code{"\e[3J"}
Erase the scrollback buffer (i.e. any lines above the home line).
(This is an xterm feature.)

@item @code{"\e]30;" @var{name} "\a"}
Sets the ``session name'' to @var{name}, which is shown in the window title.
Specifically sets the @code{name} attribute of the top-level
domterm @code{<div>} node to @var{name}.  This can be used
to enable stylesheet rules to only apply to specfic DomTerm windows.
If an active CSS stylesheet contains:

@example
div.domterm[name="@var{name}"] @{ @var{rules} @}
@end example

then the @var{rules} are only active for a DomTerm element whose
session name is @var{name}.

@item @code{"\e]72;" @var{html-text} "\a"}
Insert HTML text.

The HTML is sanity-checked for safety.
It needs to be well-formed XML; thus to write a horizontal line
you must write @code{<hr/>} (with the extra ``@code{/}'').

The actual policy for allowed elements and attributes
can be changed by overwriting the @code{elementInfo}
and @code{allowAttribute} functions in @code{terminal.js}.
The default policy is a work-in-progress.

@item @code{"\e]73;" key "\a"}
@itemx @code{"\e]74;" key "\a"}
Simulate pressing @var{key}.  Used by auto-line mode.
The @code{73} variant supresses echo.

@item @code{"\e[12u"}
Start of error output.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"error"}.
The default style is to display the text in red.

@item @code{"\e[11u"}
End of error output.

@item @code{"\e[14u"}
Start of prompt.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"prompt"}.
The default style is to display the text in green.

@item @code{"\e[13u"}
End of prompt.
The prompt is included in selections that surround it.

@item @code{"\e[18u"}
End of non-selectable prompt.
The prompt is not part of the text content of the document,
and is not included in selections.
The prompt string must be plain text with no styling.
You can use this for all prompts, but it is especially recommended
for continuation lines, such as the shell's @code{PS2} prompt.

@item @code{"\e[15u"}
Start of an input line.
This also implicitly ends a (selectable) prompt.
The input line is implicitly terminated by a @code{'\n'}
(carriage return).

@item @code{"\e[16u"}
@itemx @code{"\e[17u"}

Delimit a @ref{Hide/show buttons,hide/show "button"}, with @code{"\e[16u"} before
and @code{"\e[17u"} after.

@item @code{"\e[19u"}

Start a @ref{command group}.
This command implicitly ends any existing command group.
You can write this string before writing
an input prompt string.
@end table

These escape sequences work pretty well in prompt strings,
for example for GNU readline or a shell's @code{PS1} variable.
You can place the following in your @code{~/.bashrc}
to cause @code{bash} to emit these escape sequences:
@example
PS1='$ '   # or whatever you like
if [ -n "$DOMTERM" ]
then
  PS1='\[\e[19u\e[16u\]▼\[\e[17u\e[14u\]'$PS1'\[\e[15u\]'
  PS2='\[\e[14u\]'$PS2'\[\e[18u\]'
fi
@end example
(The @code{"\["} and @code{"\]"} are bash syntax,
and are equivalent to readline's @code{"\001"} and @code{"\002"}.
They are used to indicate escape sequences that don't move the cursor,
which is needed for readline to calculate the column position.)

@table @asis
@item @code{"\e[80;97u"}
@itemx @code{"\e[80;99u"}
@itemx @code{"\e[80;108u"}
@itemx @code{"\e[80;112u"}
Set input editing mode.
The value 99 (@code{'c'}) sets character mode;
the value 108 (@code{'l'}) sets line-editing mode.
The value 97 (@code{'a'}) set automatic mode,
which switches between character mode and line-editing mode
based on the mode of the inferior process (when using a PTY).
The value 112 (@code{'p'} for "pipe") is like line-editing mode,
but the inferiors doesn't echo the input, so we have to do it.
This mode is useful when the input is a pipe or some other non-tty stream.

@item @code{"\e[99;99u"}
End-of-file on the output stream.
Calls the @code{eofSeen} method of @code{DomTerm},
which may close the current window or other appropriate action.
@end table

@subsubsection Stylesheet manipulation

@table @asis
@item @code{"\e]90;\a"}

A request to return a list of the stylesheets in the document.

Result to client: @code{"\x9D"} @var{stylesheets} @code{"\n"}

Each stylesheet is a JSON-formatted string, separated by @code{"\t"},
suitable for printing by @code{dtstyle --list}.

@item @code{\e]91;"} @var{index} @code{"\a"}
Disable the stylesheet that has index @var{index} in the list of
stylesheets in the document.

Result to client: @code{"\x9D"} @var{message} @code{"\n"}
where @var{message} is empty if there was no problem,
and is otherwise an error message.

@item @code{\e]92;"} @var{index} @code{"\a"}
As above, but enable the specified stylesheet.

@item @code{\e]93;"} @var{index} @code{"\a"}
Return the contents of the specified stylesheet.

On success the result is @code{"\x9D"} @var{rule}@sup{*} @code{"\x9D"}
where each is a JSON-quoted string.
On failure, the result is a (non-quoted) error message.

@item @code{\e]94;"} @var{rule} @code{"\a"}
If necessary, create a new temporary stylesheet,
and add the specified JSON-quoted rule to the end of it.

@item @code{\e]95;"} @var{name} @code{","} @var{styles} @code{"\a"}
@itemx @code{\e]96;"} @var{name} @code{","} @var{styles} @code{"\a"}

Create or replace a stylesheet with the given @var{name}.
If there is a @code{<style>} with a @code{name} attribute equal to @var{name},
it is replaced; otherwise a new one is created, with its @code{name} set to @var{name}.
The @var{styles} is the literal contents of the new stylesheet;
it becomes the child of the @code{<style>} element (as a single text node).
Both @var{name} and @var{styles} are strings in quoted (JSON) format.

If the code is @code{96}, no response is sent.
If the code is @code{95}, the result to the client is
@code{"\x9D"} @var{index} @code{"\n"} where @var{index}
is the index of the replaced or created stylesheet.

@end table

@subsection Special sequences sent by DomTerm to back-end

@table @asis
@item @code{"\x92" @var{name} " " @var{data} "\n"}
General format for reporting events,
where @var{name} is the name of the event (an identifier).
The @var{data} can be any text not including a @code{"\n"}
(or other control character); JSON format is used in some cases.

@item @code{"\x92" "WS " @var{rows} " " @var{cols} " " @var{height} " " @var{width} "\n"}
Report window size from DomTerm to the back-end.

@item @code{"\x92" "KEY " @var{kcode} " " @var{kchars} "\n"}
Used by auto-line mode to report a key event to back-end.
The @var{kcode} is a numeric key code,
while @var{kchars} is as string literal (JSON-formatted)
of the characters that are normally transmitted to the back-end.
(If the events was a key-press event, the @var{kcode} is negated first.)
In auto-line mode, if the pty is in canonical mode, then @var{key}
is returned to DomTerm (using @code{"\e]74;" @var{key} "\a"});
otherwise @var{kchars} are sent to the pty.

@item @code{"\x92" "ALINK " @var{href} "\n"}
Sent by the DomTerm browser when the user clicks on an @code{<a>} link.
The backend should open @var{href} (which is JSON-encoded)
in the default browser of the user's desktop.
(In the future to better support remote desktops, the backend
should support a proxy server: The @var{href} should be resolved
based on the backend's environment.)

@item @code{"\x92" "VERSION " @var{version-info} "\n"}
Sends @var{version-info} to the back-end.  Used during initialization.
@end table

@node The DomTerm JavaScript class
@section The DomTerm JavaScript class

A DomTerm instance encapsulates the
state of a terminal emulator / console.

Functions and properties not documented here should be considered
internal and (more) likely to change.

@deftypefun new DomType (@var{name})
Create a new DomTerm instance.
The parameter @var{name} is a string.
If you have multiple DomTerm instances, it is a good idea
for the names to unique, but currently nothing depends on that.
@end deftypefun

@defun initializeTerminal (element)
Initialize the DomTerm, and associate it with the give @var{element}
(which should be a @code{<div>} element that has @code{class="domterm"}).
This creates the @uref{DOM structure,sub-structure} of child elements
of @var{element}.
@end defun

@defun insertString (str)
Interpret and insert the characters of @var{str}.
If may have ANSI/xterm @ref{Wire byte protocol,escape sequences}.
This method is called by the DomTerm client code.
@end defun

@defun eofSeen ()
This method is called by the DomTerm client code
to notify DomTerm that the client has terminated.
The backend repeatedly calls @code{insertString} and then
finally calls @code{eofSeen} to signal end-of-file.

This function may be overridden.
The default action is to call the @code{close} function of the current window.
@end defun

@defun processInputCharacters (str)
Send @var{str} to the client,
where @var{str} consists of typed characters and other events.
This is a callback function that must be set by the client.
This is called by the DomTerm code in @code{terminal.js}.
@end defun

@defun reportEvent (name, data)
Called by DomTerm to notify the client that some (non-character) event happened.
The default action calls @code{processInputCharacter}
with a special sequence starting with @code{"\x92"} followed
by the @var{name}, space, the @var{data} and a newline.
@end defun

@defun setWindowSize (numRows, numColumns, availHeight, availWidth)
Called by DomTerm when the window changes size, or the (font) style changes
so the number of rows or columns has changed.
Is used to notify the client.  The default behavior is to
call @code{reportEvent} with a @code{"WS"} event type.
@end defun

@defun doPaste ()
Handles a @code{paste} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand},
which triggers a @code{paste} event.
It is called by DomTerm if the user types Ctrl-Shift-V.
@end defun

@defun pasteText (text)
Called by the @code{paste} event handler.
Actually handle a paste event.
@end defun

@defun doCopy ()
Handles a @code{copy} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand}.
It is called by DomTerm if the user types Ctrl-Shift-C.
@end defun

@defun setInputMode (mode)
Set the input editing mode.
The value 99 (@code{'c'}) sets character mode
(each keystroke is sent to the client);
the value 108 (@code{'l')} sets line mode
(local line editing with a complete line sent on enter);
the value 97 (@code{'a'}) sets automatic mode
(switch between line and character modes depending on client pty state);
the value 112 (@code{'p'}) sets pipe mode
(like line mode but with local echoing).
@end defun

@defun doLineEdit (key, str)
Handle keyboard event when doing input line editing ourselves,
rather than depending on the default action.
This is used  if the @code{useDoLineEdit} property is set.
It is also used for the first character in automatic input editing mode.
(In that case we can't use the browser default action, since we
first have to check the input mode of the client.)
@end defun

@defun handleBell ()
Called when ctrl-G (the @code{bell} character) is seen.
The default action is to do nothing.
@end defun

@defun handleLink (event, href)
Called on a click event on a @code{<a>} link element.
The default action is to call @code{preventDefault} on the @var{event},
and then call @code{reportEvent} with an @code{"ALINK"} type event.
(We can't let the browser do its default action since that would
replace the current DomTerm page.)
@end defun

@defun setWindowTitle (title, option)
Set the title of the containing window.
Called by DomTerm when it sees certain @code{xterm}-style escape sequences.
Calls @code{updateWindowTitle(formatWindowTitle())}.
@end defun

@defun formatWindowTitle ()
Returns a suitable string for a window title,
based on various properies.
@end defun

@defun updateWindowTitle (title)
Actualy set the window title - which is usually the
reuslt of @code{formatWindowTitle()}.
@end defun

@defun elementInfo (tag, parents)
Overridable function called by the HTML sanitizer.
@end defun

@defun allowAttribute (name, value elementInfo, parents)
Overridable function called by the HTML sanitizer.
@end defun

@node Architecture notes
@section Architecture notes

@example
            --------------------
 Front-end  |  Display and keyboard
            |---------------
            |  Browser engine (runs terminal.js)
            |---------------
            |  Communication stub
            ---------------
              ^
              | Optional network
              V
            --------------------
  Back-end  |  Communication stub
            |---------------
            |  Application
            ---------------
@end example

The DomTerm architecture allows for multiple front-end
implementations and multiple back-end implementations.
The front-end runs the actual terminal emulator (written in JavaScript)
and manages the display. The front-end can be a window or tab in a
general-purpose browser like Firefox or Chrome, or it can be a
special-purpose browser optimized for DomTerm. The latter would drop
the URL bar, add a menu bar and other controls as more suitable
to a terminal emulator, and tweak a few minor security restrictions.

The back-end runs the actual application.
The application can be a general-purpose shell, or a custom application,
such as a programming language run-time or a chat server.
The back-end can run the application under a PTY.
Alternatively, the application can communicate using pipes,
if you prefer to avoid PTYs or they are unavailable (as on Windows).

The front-end and back-end can be combined in the same process,
using an embeddable browser.
he current @ref{Applications,sample applications}
include a single-process terminal emulator that uses the JavaFX WebEngine,
a JavaFX pop-up menu, and a PTY class.
In this case the ``communication stub'' is WebEngine's
bridge between JavaScript and Java, plus communicating with the PTY.
A C/C++ application could similarly use QtWebEngine
and its C++/JavaScript bridge.

If the front-end and back-end are separate processes, they can
communicate using a byte-stream protocol.
Currently we stick to well-formed UTF8, because JavaScript's
support for byte arrays is still weak.
The protocol is based on the xterm protocol: text and escape sequences
from the application to the front-end; keystrokes and encoded events
sent the other way.  More complex data can be encoded using JSON.
Most of protocol is handled by @code{terminal.js}.
The communications stubs may generate or intercept some messages:
For example a PTY stub will want to handle window size change events.

These data streams can be layered on top of other protocols,
such as telnet, ssh, or WebSocket.
Using WebSocket is convenient because it is built in to modern browsers,
so the entire front-end (except @code{terminal.js})
is readily available.

@subsection A roadmap

This is my vision of how terminals should be done in 2016.

The ``terminal emulator'' application that a user runs
(for example by clicking an icon or from an existing command line)
should be a small program that parses command-line arguments,
then fires up (if necessary) a front-end process and a back-end process,
and connects the two.
This application would have an option to connect to an existing
back-end session, supporting the functionality of GNU Screen.

The default backend would be a small WebSocket server that forks
off a user process, by default using a PTY (when available), otherwise
using pipes.
It would be helpful if the back-end can also serve http/https, for
serving the initial html page and JavaScript (unless those could be
builtin to the front-end).  A builtin http server could also
support images and other non-textual data, if you don't want to
include it directly in the output,
possibly using a @code{@uref{https://en.wikipedia.org/wiki/Data_URI_scheme,data}} URI.
The @uref{https://libwebsockets.org/index.html,libwebsockets}
library seems a possible base for a WebSockets+http server.

More blue-sky, it would be nice if the terminal subsystem and/or the C library
could have a special mode for PTYs running under DomTerm.
For example, the terminal driver should not do canonical-mode
input-line cooking, but should delegate that to DomTerm.
(DomTerm approximates this by monitoring the terminal @code{canon}
flag, but a more robust protocol would be better.)
Type-ahead could also work better.
It would also be nice to delimit output to standard error with the
appropriate escape sequences.

@subsection WebSocket server

The included server uses @uref{http://java-websocket.org/,Java-WebServer},
which is very compact and light-weight.
The @code{java_websocket.jar} is checked in for convenience
(though that may change).

Each connection to the server creates a new process, but using the
same @var{command} and @var{arg}s.
(Multiple connections using @code{--process} will fail for some
unknown reason.)

(An older WebSocket server uses libraries from the
@uref{https://tyrus.java.net/,Tyrus project}.
These libraries are much bigger, but this implementation
could be suitable for a JavaEE environment as it follows JSR-356.)

(If using PTYs, which requires native code anyway, it may be better
to use a server written in C or C++, such as

@subsection Line vs character input modes

In line input mode we can end up with double echoing:
As you edit the input line, it is displayed.
Then when the line is sent, the slave will normally echo the input.

Ideally you'd want to integrate with the kernel
terminal sub-system, to suppress echoing.   In lieu of
that, line editing mode could delete the input line
from the DOM before sending them to the inferior.
To avoid annoying flashing, this is done lazily:
DomTerm waits to remove the input line until it gets some
output from the inferior (usually the echo).

In addition to "char mode" and "line mode" (like the
Emacs term mode) there is an "auto mode" which watches
the states of the inferior pty to automatically switch
between them.  In autoEditing mode, if we're currently
in char mode, then a key event gets sent to the pty layer.
If the pty is in non-canonical mode, the key event is
sent to the server.  If the pty is in canonical mode, then
a message is sent back to the front-end, which switches
to line mode, and processes the event.

@subsection Line structure

"Line" here refer to "visual line": A section of the DOM that should be
treated as a line for cursor movement.  Line breaks may come from the
back-end, or be inserted by the line break algorithm.

The lineStarts array maps from a line number to the DOM location
of the start of the corresponding line.

The lineEnds array maps to the end of each line.
Always points to a span node with the line attribute set.
Normally lineEnds[i] == lineStarts[i+1]; however, sometimes
lineStarts[i] is the start of a @code{<div>} or other block element.

@subsection Colors and high-lighting

@emph{This needs updating.}

Escape sequences (for example @code{"\e[4m"} - "underlined", or
@code{"\e[32m"} - "set foreground color to green") are translated to
<span> elements with "@code{style}" attributes (for example
`<span style="text-decoration:underline">` or `<span style="color: green">`).
After creating such a `<span>` the current position is moved inside it.

If we've previously processed "set foreground color to green", and we
see a request for "underlined" it is easy to ceate a nested `<span>`
for the latter.  But what if we then see "set foreground color to red"?
We don't want to nest <span style="color: red">` inside
<span style="color: green">` - that could lead to some deep and
ugly nesting.  Instead, we move the cursor outside bot existing
spans, and then create new spans for red and underlined.

The `<span>` nodes are created lazily just before characters are
inserted, by `_adjustStyle`, which compares the current active styles
with the desired ones (set by `_pushStyle`).

A possibly better approach would be to match each highlight style into
a `class` attribute (for example `green-foreground-style` and
`underlined-style`).  A default stylesheet can map each style class to
the correspoding CSS rules.  This has the advantage that one could
override the highlighting appearance with a custom style sheet.

@subsection Line-breaking / pretty-printing

For a terminal emulator we need to preserve (not collapse) whitespace,
and (usually) we want to line-break in the middle of a word.

These CSS properties come close:
@example
white-space: pre-wrap; word-break: break-all
@end example
This is simple and fast.  However:
@itemize
@item
It doesn't help in inserting a visual indicator, like Emacs's arrow,
  to indicate when a line was broken.
@item
It doesn't help managing the line table.
@item
It doesn't help with pretty-printing (for example grouping).
@item
Chrome (version 52) seems to have from problems with @code{break-all}.
@end itemize

Hence we need to do the job ourselves.

Define a DOM API for (LISP-style) pretty-printing.
Line-breaking is re-calculated on page width change.

@table @asis
@item @code{<span line="fill">}
@itemx @code{<span line="linear">}
Line break types, as in Common Lisp.

@item @code{<span class="group" ident=N">}
@end table

Derek Oppen algorithm

Stable, Flexible, Peephole Pretty-Printing
http://macbeth.cs.ucdavis.edu/ph-final.pdf
