\input texinfo.tex      @c -*-texinfo -*-
@c %**start of header
@setfilename domterm.info
@documentencoding UTF-8
@settitle DomTerm - a terminal emulator and console using DOM and JavaScript

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex pg cp
@codequoteundirected on
@codequotebacktick on

@macro mux-prefix
Control-Shift-A
@end macro


@titlepage
@title DomTerm - a terminal emulator and console using DOM and JavaScript
@end titlepage

@node Top
@top DomTerm

The @code{domterm} application is terminal emulator, REPL console,
and screen multiplexer (like @code{tmux} or GNU @code{screen}).

The user interface and terminal emulation
is handled by a JavaScript library (called DomTerm).
Communication between the application and the UI
is done with Web Sockets.

@emph{}
@uref{images/domterm-panes-2.png,@image{images/domterm-panes-2}}

This @uref{https://lwn.net/Articles/670062/,LWN article} provides
background, motivation, and a summary of the functionality.

The name ``DomTerm'' is due tp that it  works by manipulating the
@uref{https://en.wikipedia.org/wiki/Document_Object_Model,Document Object Model (DOM)} of a browser:
the nested structure of elements, text, and attributes.
(Also, most other appropriate names were already taken...) 

DomTerm is Free Software (open-source)
available at @uref{https://github.com/PerBothner/DomTerm,https://github.com/PerBothner/DomTerm}.
The older @uref{https://github.com/PerBothner/JWebTerminal,JWebTerminal} project
was based on similar concepts, but was mostly written in Java using
@uref{https://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm, Javafx WebView}.

@subheading Recent advances:

@itemize
@item
The @code{domterm} command takes multiple sub-commands,
similar to how @code{tmux} or @code{git}.
The command automatically starts server if not already running.
@item
@ref{Sessions and Windows,Session management}, with detachable sessions, as in
@code{tmux} or GNU @code{screen}.
@item
An experimental package @uref{https://github.com/PerBothner/atom-domterm,atom-domterm} for the @uref{https://atom.io/,Atom editor} is available.
@item
A front-end based on @uref{https://electron.atom.io/,Electron}
is now the preferred one.
@item
We now support draggable tabs and panes.
This uses @uref{http://golden-layout.com/,GoldenLayout}.
@item
An experimental @ref{Paging,pager} with optional
automatic pause on each page.
@item
DomTerm now handles the @code{vttest} terminal test program
very well, including BCE (Background Color Erase).
@item
The preferred ``backend` is now @uref{https://libwebsockets.org/,libwebsockets}.
This is light-weight, does not require Java, is actively maintained,
and enables serving http and the WebSockets on the same port.
@item
Support for CJK (Chinese, Japanese, and Korean) characters is improved:
Double-width characters now really are two columns wide.
@item
There is now a DomTerm mailing list at @email{domterm-discuss@@domterm.org}
with an @uref{http://lists.domterm.org/listinfo.cgi/domterm-discuss-domterm.org,information page}
and @uref{http://lists.domterm.org/pipermail/domterm-discuss-domterm.org/,archives}.

@item
Optionally uses Google's Closure compiler to reduce the size of the JavaScript.

@item
The qtdomterm application is designed to replace your favorite
standalone terminal emulator program. It uses QtWebEngine.

@item
Mouse support using xterm protocols, used by @code{emacs} and @code{mc}.
In addition, Alt-Click generates arrow-key events to move the caret
within an input line.
@end itemize

@subheading Why another terminal emulator

@emph{}@image{images/domterm-1}
The goal of this project is to combine two related but
separate tools: a terminal emulator, and a rich-text console,
and do it properly.

There are many terminal emulators, including quite a few written in JavaScript.
However, they generally work with a rectangular grid of characters,
and don't integrate rich text (images, math, variable-width text,
variable-length lines, interaction) well.

There are also various tools designed for REPL-style interaction,
chat clients, etc. Examples include @uref{http://ipython.org/,IPython}
or the the JavaScript console of a web browser.
However, they don't work as terminal emulators, or at best have
limited functonality or require switching modes.

For rich text applications it seems obvious to use web technologies:
DOM and JavaScript.

One goal of this project is a stand-alone terminal emulator application
that techies can use as a day-to-day terminal emulator, and that also
seamlessly provides support for rich text and interaction. That means
an embedded web engine.

The core of the project is a JavaScript package that can be used and
embedded in different modes and applications.

@menu
* Features:: Features and screenshots
* Downloading and building::
* domterm application:: The domterm command
* Settings: The settings.ini file
* Applications:: Other domterm application
* Sessions and Windows::
* Paging:: Paging and Pausing
* Styling:: 
* Java tools::
* Tips:: Tips and solutions
* To do:: Ideas and projects for DomTerm
* Technical documentation::
@end menu

@node Features
@chapter Features and screenshots

@c The @emph is a dummy to force the @image inside a paragraph
@emph{}
@image{images/domterm-2}
A @strong{full-featured terminal emulator}, like @code{xterm}.
It is mostly compatible with setting @code{TERM=xterm-256color},
as many terminal emulators do.
Here you see the @code{mc} (Midnight Commander) file browser
running in the stand-alone DomTerm application.
@ifdocbook
(Click on image to see the full-size screenshot.)
@end ifdocbook
Emacs (shown later) and GNU readline also work well.

@emph{}@image{images/domterm-polygon-1}
A back-end @strong{can ``print'' images, graphics, and rich text}.
Here you can see evaluating and ``printing''
@code{Paintable} objects, which are graphical objects such as
filled polygons.
from the @uref{http://www.gnu.org/software/kawa/,Kawa} REPL.

The front page screenshot shows ``printing'' HTML for images and rich text.
(The expressions starting with @code{#<} are
@uref{http://www.gnu.org/software/kawa/XML-literals.html,XML literals},
which evaluate to @code{Element} objects. ``Printing'' an @code{Element}
inserts its HTML representation in the DomTerm output.)

The image later (with the yellow circle) shows printing
@uref{https://en.wikipedia.org/wiki/Scalable_Vector_Graphics,SVG}.

@emph{}
@image{images/emacs-in-firefox-1}
The guts of the implementation is portable JavaScript (@code{terminal.js}),
which can be @strong{embedded} in multiple front-ends.
The source includes a stand-alone terminal emulator,
using the embedded JavaFX WebEngine browser.
You can also use the included WebSockets server,
and along with your HTML5 browser of choice.
Here is @strong{Emacs displaying in a FireFox browser window}.

Applications of DomTerm include:
@itemize
@item
A chat/talk window.
@item
A read-eval-print-loop for an interactive scripting language.
@item
A command console.
@item
A terminal emulator.
@end itemize

User @strong{preferences are controlled a CSS stylesheet},
which can be changed by an application.

@strong{Uses a byte-protocol} to communicate with the back-end,
so can run in a browser (using web sockets);
be embedded in an application;
or run as a standard terminal emulator application.

Optional @strong{input editing}.  In @dfn{character mode},
each character is sent to the application, like a traditional terminal.
In @dfn{line mode}, the browser does the editing, and send the input line
to the back-end when Enter is typed.
A history of previous lines is available, accessible
with the Up/Down arrow keys.
@dfn{Automatic mode} switches between character mode and line mode
depending on whether the back-end is in ``@uref{http://www.gnu.org/software/libc/manual/html_node/Canonical-or-Not.html,canonical mode}''.

@emph{}@image{images/domterm-sh-svg}
@strong{Smart line-wrapping}:
Remembers which lines were too wide (and thus
were wrapped).
The default style add markers to show when wrapping occurred,
as seen in the nearby screenshot.
Window size re-size will automatically re-do line-breaking.
Copying the selection as text will only include hard newlines.
Reports window resize to application.
@uref{http://per.bothner.com/blog/2017/dynamic-prettyprinting/,@strong{Dynamic pretty-printing}} (Common Lisp style) uses special commands to group
logical blocks, and attempts to keep the text of a block on a single line
with automatic re-flow on window re-size.


``Print'' @ref{Hide/show buttons,hide/show buttons},
using certain escape sequences enables @strong{text folding}.
The nearby screenshot shows the output of @code{ls -l} being hidden.

Handles Unicode.
Good CJK (Chinese, Japanese, Korean) support:
double-width characters really are two columns wide.
Experimental IME (Input Method Editor) support.

Maintains @strong{a clean DOM structure}, and thus @strong{clean HTML export}.
Text selections generally give you what you expect.
In particular TAB characters are preserved.

Future: Optional automatic pagination.

@node Downloading and building
@chapter Downloading and building

@subheading Getting the DomTerm source code

The sources are in
a @uref{https://github.com/PerBothner/DomTerm,GitHub repository}.
To download the sources do:
@example
git clone https://github.com/PerBothner/DomTerm
@end example

@subheading Prerequisites

(Please help out with instructions for other platforms, especially
Debian/Ubuntu, MacOS, *BSD, and Windows 10.)

@c for libmagic: libmagic-dev (Debian/Ubuntu)

@subsubheading Fedora

On Fedora, you need to first:
@example
sudo dnf install gcc make automake autoconf texinfo patch libwebsockets libwebsockets-devel json-c json-c-devel openssl-devel file-devel libcap-devel
@end example
If configuring @code{--with-qtwebengine} (recommended), also do:
@example
sudo dnf install gcc-c++ qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtwebchannel-devel
@end example
If configuring with @code{--enable-compiled-in-resources} (for @code{xxd} - only needed at build time):
@example
sudo dnf install vim-common
@end example
For Java classes, do:
@example
sudo dnf install java-1.8.0-openjdk-devel
@end example
(You can also use Oracle JDK, version 8 or 9.)

@subheading Building from source

The core part of DomTerm is the JavaScript code @code{terminal.js},
which defines the @code{DomTerm} class.
You can use @code{terminal.js} in your own application.
However, there is also some utility code, include standalone
terminal emulator applications.

The best terminal emulator experience at this time
is probably the combination of libwebsockets 2.2
with the Electron front-end.

Another good application is @code{qtdomterm}.
It uses the C++-based @uref{https://www.qt.io/,Qt toolkit}
including @uref{https://wiki.qt.io/QtWebEngine,QtWebEngine}.
Needed packages are included with Fedora 27.
(Reports of attempt to build or use qtdomterm on other platforms
would be welcome.)

Building the sample applications and libraries is a two-part process:

If building from the @code{git} respository,
first do:
@example
autoreconf
@end example
This runs the GNU autotools (@code{aclocal}, @code{autoconf},
and @code{automake}).

Then run the @code{configure} script:
@example
./configure @var{configure-options}
@end example
where @var{configure-options} can be:
@table @code
@item --with-libwebsockets[=@var{lws-build}]
Build the C application @code{ldomterm},
which uses @uref{https://libwebsockets.org/,libwebsockets}.
If @var{lws-build} is specified, it should be the path
to the @code{build} subdirectory of the libwebsockets compiled source tree.
(The files @code{@var{lws-build}/lib/libwebsockets.a}
and @code{@var{lws-build}/include/libwebsockets.h} should exist.)

Libwebsockets version 2.2 or newer is required,
as older versions do not support flow control or paging.

This is the recommended ``backend'' and the default.
@item --with-java_websocket
@itemx --with-java_websocket=/path/to/java_websocket.jar
Build a WebSocket server, using
@uref{https://github.com/TooTallNate/Java-WebSocket/,Java WebSockets},
which allows using any modern browser as a front-end.
This server is no longer recommended or enabled by default.

This options adds the classes in @code{java_websocket.jar} to @code{domterm.jar}.
@item --enable-pty
Compile support for PTYs (pseudo-teletypes).
This allows character mode: sending individual characters (rather than lines)
from the front-end to the back-end.
This is the default, except on Windows (which doesn't support PTYs).
@item --with-javafx[=@var{library-name}]
Use JavaFX to run standalone applications.
The @code{@var{library-name}} does not need to be specified if using Java SE 8.
It may be needed for OpenJDK or Java SE 7,
in which case it is either a path to @code{jfxrt.jar},
or (for convenience if using Java SE 7) the @code{JAVA_HOME}.
@item --without-java
Disable building anything that depends on Java.
@item --with-qtwebengine
Use Qt and @uref{https://wiki.qt.io/QtWebEngine,QtWebEngine}
to build @code{qtdomterm}, an advanced front-end that
supports multiple tabs, screen re-sizing, and other nice features.

For this you need the Qt development tools including QtWebEngine installed.

For Fedora, you also need:
@example
sudo dnf install qt5-qtbase-devel  qt5-qtwebchannel-devel qt5-qtwebengine-devel
@end example
@item --with-closure-compiler=@var{compiler.jar}
Use Google @uref{https://developers.google.com/closure/compiler/,Closure Compiler} to minimize the size of the JavaScript.
(Current only the ``simple optimizations'' are done.
Using the ``advanced optimizations'' would reduce the JavaScript file
size further, but causes some not-yet-resolved problems.)

@item --enable-compiled-in-resources
This feature causes the html, JavaScript and css files needed by DomTerm
to be compiled into the executable.
Otherwise, they are served from the compressed @code{domterm.jar}.

@item --enable-ld-preload
This is an experimental feature to preload a library to interpose
some system functions.  Most importantly it overrides @code{tcgetattr}
so that DomTerm gets notified on term terminal mode changes.
@end table

Then just:
@example
make
@end example

To test it, you can try either:
@example
bin/domterm
@end example
or
@example
bin/qtdomterm
@end example
Either starts up a useable terminal emulator in a fresh window.
The former starts up a @code{bash} shell, running in a PTY,
with a libwebsockets server.  It also starts a stripped-down browser window,
using that for the input and output
of the @code{bash} shell.
The latter (obviously) runs qtdomterm.

The @code{qtdomterm} executable has no external dependencies
(besides the Qt libraries), and you can copy to wherever you want it.

@node domterm application
@chapter The domterm command

The @code{domterm} command is the preferred away of using DomTerm.

If you run @code{domterm} with no arguments, it creates a new terminal
emulator window, just as if you'd start @code{xterm}, say.
You can specify options to specify what kind of window is
created (for example a new tab or a web browser window).
You can also specify a @var{command} to perform other actions
besides creating a new terminal emulator.

@c The actual @code{domterm} program is primarily a server
@c for WebSockets and http.  When it receives a connection,
@c it runs a specified command, by default a shell.

@c Unless @code{--port} is specified, @code{ldomterm} will automatically
@c start a browser session (the ``front-end'') that connects
@c to the server.  The default is currently
@c as if you specified @code{--electron}, or @code{--browser} (if the
@c @code{electron} is not found).

@display
@code{domterm} [@var{options}] [@var{command} @var{arg}...]
@end display

The @var{command} specifies one of a set of commands used to control
@code{domterm}, as described in the following sections.
If @var{command} is not specified, the default command is @code{new},
which creates a new session using a default shell such as @code{/bin/bash}.

@anchor{session-creating}
@subheading Creating a new session

Creating a new session is done with the @code{new} commands,
possibly abbreviated:

@display
[@b{@code{new}}] [@var{executable} @var{arg}...]
@end display

This creates a new process running the @var{executable}
with the specified command-line arguments.

You can leave out the @code{new} if the @var{executable}
contains a ``@code{/}'' (slash).  For example:

@example
$ domterm /bin/csh -v
@end example

If @var{executable} is not specified, the default shell
(for example @code{bin/bash}) is used.

The @var{executable} runs a new terminal window,
as specified a @dfn{window specifier}.

The following options control which front-end (usually a browser),
if any, is started.

@subheading Window specifier option

Use a @var{window-specifier} option with certain commands,
such as @code{new} or @code{attach}.  For example:

@example
domterm --electron new
domterm --below attach '#4'
domterm --firefox /bin/sh
@end example

@table @asis
@item @code{--browser}
@itemx @code{--browser=}@var{program}
@itemx @code{--browser=firefox}
@itemx @code{--browser=google}
@itemx @code{--browser=google-chrome}

Use @var{program} as a browser to run DomTerm in.
If @var{program} is not specified,
creates a new window or tab in your preferred desktop browser.

If @var{program} is specified, instead creates a window
in the specified browser, where @var{program} is the name
of a browser program that takes a single URL argument.
The @var{program} can be a multi-word template,
where @code{%U} is replaced by a URL generated by @code{domterm}.

Using @code{firefox}, @code{chrome}, or @code{google-chrome}
for @var{program} enables some special tricks to search for those browsers.
(Using @code{chrome} or @code{google-chrome} has the same effect.)

@item @code{--electron}
Use a front-end based on @uref{https://electron.atom.io/,Electron}.
This is currently the nicest (and default) front-end.

@item @code{--firefox}
Same as @code{--browser=firefox}.
(This used to start a @uref{https://en.wikipedia.org/wiki/XUL,XUL}
application, but that is no longer supported.)

@item @code{--chrome}
This uses the Google Chrome browser,
started using the @code{--app=} option,
so you get a fresh chrome-less window (with no menubar or toolbar).

This works well and the performance is good.
This method provides no menubar or context-menu customization (so far).

@item @code{--qtdomterm}
@itemx @code{--qtwebengine}
Experimental (not all functionality is working).
Either option (they do the same thing)
runs @code{qtdomterm} with the @code{--connect} option,
after starting up a websockets server.

@item @code{--left}
@itemx @code{--right}
@itemx @code{--above}
@itemx @code{--below}
If there is a current DomTerm window, split it in two,
and create a new window to the left/right/above/below the old one.
@item @code{--pane}
Equivalent to either @code{--right} or @code{--below} depending
on the current window's width/height ratio.
@item @code{--tab}
Create new tab.

@item @code{--detached}
When creating a new session, it is detached, without a window.
@end table

@subheading Miscellaneous commands

@table @asis
@item @b{@code{help}} [@var{sub-help}]
Print some help.  The @var{sub-help} may be a sub-command.

@item @b{@code{is-domterm}}
Succeeds (exits with code 0) if the current terminal is DomTerm;
fails (exits with code -1) otherwise.

This test does not depend on environment variables,
but instead sends a special request code, and checks the response.
This test works over an @code{ssh} connection.
(The test does require that either @code{DOMTERM} be non-empty,
or that @code{TERM} be either empty or contain the string @code{xterm};
otherwise it does not try to the request code.)

@item @b{@code{browse}} @var{url}
Create a new browser window or sub-window that displays @var{url}.
This is implemented using an @code{iframe}.
Access depends on the permissions of the browser (front-end).
(A future command may proxy via the back-end server.)

One use for this is to view documentation in a sub-window:
@example
$ domterm --above browse http://example.com/
@end example
@end table

@subheading ``Printing'' images or html

@table @asis
@item @b{@code{html}}
@itemx @b{@code{html}} @var{html-value} ...
Use this to embed HTML content info the DomTerm page.
If there are no arguments, read from standard input.
Either of the following work:
@example
echo 'E = mc<sup>2</sup>' | domterm html
domterm html 'E = mc<sup>2</sup>'
@end example
displays: @code{E = mc@sup{2}}.

@item @b{@code{image}} [@code{-@var{n}}] [@code{--@var{attrname}=@var{attrvalue}}]... @var{filename}

This script ``prints'' the contents of the named image file to domterm.
This uses a ``@code{data:}'' URI with the file contents sent directly to domterm, so it works when working remotely.

The @var{filename} must be a file that can be displayed
by an HTML @code{<img>} element, most commonly a @code{png} or @code{jpg} file.

By default (no @code{-n} is specified),
the image has a @code{display: block} style
(so it is automatically on a ``line'' by itself),'
and gets a horizontal scroll bar if and only if it is too wide to fit.
If @code{-n} is specified, then only a plain @code{<img>} element is written,
which means you can write multiple images and other HTML on the same ``line''.

@table @asis
@item @code{--@var{attrname}=@var{attrvalue}}
Specify the given attribute; for example: @code{--height=200}.
Valid @var{attrnames} are the following, which
are specified in the HTML specification:
@code{alt}, @code{longdesc}, @code{height}, @code{width}, @code{border}, @code{hspace}, @code{vspace}, @code{class}.

For example: @code{--width=600} scales the image width to be the given number
of pixels (in the CSS meaning).  (The height is scaled proportionally,
unless you also specify the @code{--height} option.)
@end table

@item @b{@code{fresh-line}}
If not already at beginning of line, starts a fresh line
@end table

@subheading Sessions

@table @asis
@item @b{@code{attach}} @var{session-specifier}
Create a new window displaying an existing session.
The same session (process) may be displayed in multiple windows.
(Work-in-progress.)

@item @b{@code{list}}
List information about running sessions.
@end table

@subheading Miscellaneous options

@table @asis
@item @code{--geometry} @var{width}@code{x}@var{height}
Specify initial size of new top-level windows.
The default if not specified is currently @code{800x600}.
The @var{width} and @var{height} are in pixel units
and must be positive integers.

Works for both the Electron and qtdomterm front-ends.

@item @code{-L} @var{socket-name}
@itemx @code{--socket-name=}@var{socket-name}
DomTerm uses a Unix Domain socket to communicate between
the command-line and the server.
By default the socket is the file @code{$HOME/.domain/default.socket},
but this option overrides that.
Using different socket names mean you get different servers
that do not know about each other.
If @var{socket-name} starts with @samp{/} then the filename is absolute;
otherwise @code{$HOME/.domain/} is prepended.
If there is no file extension, @code{.socket} is appended.

DomTerm also creates a temporary @code{html} that has the
same name as the socket, but with a @code{.html} extension.
That is by default it is @code{$HOME/.domain/default.html}.

@item @code{--no-daemonize}
When a domterm backend (server) is created, it normally turns itself
into a a @uref{https://en.wikipedia.org/wiki/Daemon_(computing),daemon}.
This option prevents ``daemonizing'' - which is helpful for debugging.

@item @code{--remote-debugging-port=@var{debug-port}}
@emph{Only relevant for the @code{qtdomterm} front-end.}
(For the Electron front-end, use menu item @i{Toggle Developer Tools}.
If using a general web browser, use its debugger.)
Allow @uref{http://doc.qt.io/qt-5/qtwebengine-debugging.html,remote debugging}
(using a Chromium-based browser, such as Google Chrome).
This is useful for debugging DomTerm itself, as well as any
inspecting any unusual HTML, CSS, or JavaScript you might throw at it.

@item @code{--port} @var{portnum}
@emph{(Probably obsolete.)}
Start a server, listening on the specified @var{portnum}.
A @var{portnum} of 0 lets the system choose an available port,
which is printed out.  No front-end is started.

@item @code{--once}
@emph{(Probably obsolete.)}
Only allow a single connect before shutting down.
This option is the default unless @code{--port} is specified.
@end table

There are other @code{ldomterm} options which useful
if you want to run DomTerm as a server.

@subheading Working with styles

@table @asis
@item @b{@code{reverse-video}} @code{on}|@code{off}
@end table

@table @asis
@item @b{@code{add-style}} @var{style-rule} ...

If called for the first time, create and install a temporary
stylesheet.
This temporary stylesheet has a @code{name} attribute
with the value @code{"(temporary-styles)"}.
Add each @var{style-rule} to the temporary stylesheet.

For example, to change the background color to pink:
@example
$ domterm add-style "div.domterm @{ --background-color: pink @}"
@end example

You can also set the @code{background-color} style directly:
@example
$ domterm add-style "div.domterm @{ background-color: pink @}"
@end example
Howeverm it is better to set the @code{--background-color} CSS variable,
as that is required for reverse video and ``Background Color Erase'' to work.

Inverse video (using CSS variables):
@example
$ domterm add-style "div.domterm @{ --background-color: black; --foreground-color: white @}"
@end example

Changing font size:
@example
$ domterm add-style "body @{ font-size: 14pt @}"
@end example

@item @b{@code{list-stylesheets}}
List on the standard output the set of stylesheets associated with
the domterm document, one per line:

@example
$ domterm list-stylesheets
0: enabled  - "style/domterm-core.css"
1: enabled  - "style/domterm-standard.css"
2: enabled  "Default DomTerm styling" "style/domterm-default.css"
3: enabled  - "(temporary-styles)"
@end example
After the sequence number, either @code{enabled} or @code{disabled}
specified whether the stylesheet is disabled.
If the stylesheet has a @code{title}, if is shown next (in json format);
otherwise @code{-} is printed.
If the stylesheet has the @code{href} attribute, it is shown next
(in json format);
otherwise, if it has the @code{code} attribute, that is shown;
otherwise @code{-} is printed.

@item @b{@code{load-stylesheet}} @var{name} @var{filename}

Replace or create a new stylesheet with the given @var{name}.
The content of the stylesheet are read from the given @var{filename}.
If the @var{filename} is @code{-} then standard input is used.

The @var{name} is used to set the non-standard @code{name} attribute
of the created @code{<style>} element.  If there is an existing stylesheet
with a matching @code{name} attribute, then that stylesheet is replaced;
otherwise a new stylesheet is created.
The @var{name} attribute is displayed by the @code{list-stylesheets} subcommand.

@item @b{@code{print-stylesheet}} @var{index}
Print out the style rules of the specified stylesheet,
which is an @var{index} in the @code{list-stylesheets} output.

@item @b{@code{disable-stylesheet}} @var{index}
@itemx @b{@code{enable-stylesheet}} @var{index}
Disable or enable the specified stylesheet.
A @var{index} is an integer index into the
list as shown by @code{list-stylesheets}.

@example
$ domterm disable-stylesheet 2
@end example
@end table

@node Settings
@chapter The settings.ini file

User preferences for DomTerm are key in the file @code{.domterm/settings.ini}
in the user's home directory.
If the @code{settings.ini} is changed it is automatically re-loaded.

The syntax of @code{settings.ini} is a variant
of the @uref{https://en.wikipedia.org/wiki/INI_file,INI file} format.
A preference is written as:
@example
@var{keyword} = @var{value}
@end example
For example:
@example
window.geometry=800x600
@end example
Spaces before or after @code{=} are optional.
A @var{keyword} should be a sequence of letters, numbers,
periods or hyphens.
The @var{value} is almost any sequence of characters (depending of
the @var{keyword}), up to end of the line.

Multi-line values are written as an empty line following the @samp{=},
and then one or lines starting with a single space followed by @samp{|}.
For example:
@example
style.user =
 |div.domterm @{ --background-color: azure @}
 |div.domterm-spacer @{background: none @}
@end example
In this cases the resulting @var{value} has two lines,
with the two-character prefixes @samp{ |} removed.

For a boolean @var{value} any
one of @code{true}, @code{yes}, or @code{on}
enable the preference;
one of @code{false}, @code{no}, or @code{off}  disable the preference.

Comment lines start with @code{#} in the first column.
Comment lines and all-blank lines are ignored.

@table @asis
@item @code{@b{window.geometry} =} @var{geometry}
Control the size of new top-level windows.
(Currently works for either Electron or qtdomterm windows.)
The @var{geometry} has the same syntax as the @code{--geometry}
command-line opton, @code{@var{W}x@var{H}},
where @code{@var{W}} and @code{@var{H}}
are the width and height of the window, in pixels.

The default is @code{800x600}.

@item @code{@b{style.user} =} @var{css-style-rules}
Set the @code{user} stylesheet to the rules in @var{css-style-rules}.
The latter is typically a multi-line value.

See the @ref{Styling} section for examples.

@item @code{@b{style.qt} =} @var{css-style-rules}
@code{qtdomterm} only: Set styling for QT user interface widgets.
For example to specify the color green
for text in @code{QMenu} do:
@example
style.qt =
 |QMenu @{ color: green; @}
@end example
See @uref{http://doc.qt.io/qt-5/stylesheet-examples.html, more examples}.

@item @code{@b{style.dark} =} @var{value}
This option (if set) selects ``reverse video'', which is a color preference
for a darker background and a ligher foreground (text).

The default is @code{off}, which selects
lighter background and a darker foreground colors.
@end table

@node Applications
@chapter Other DomTerm Applications

The core of DomTerm is the JavaScript @code{terminal.js},
but we also provides a few wrappers and applications that make use of it.

The @code{domterm} command is normally an alias for @code{ldomterm}.

@menu
* qtdomterm application::
* jdomterm script::
@end menu

@node qtdomterm application
@section The qtdomterm terminal emulator

@strong{The plan is to simplify qtdomterm so it just handles display.
It will be invoked by the @code{domterm} command to handle display,
while the @code{domterm} command manages jobs and sessions.}

You start and use @code{qtdomterm} just like other
terminal emulators such as @code{xterm}.
In addition to the regular DomTerm features (colors, stylesheets,
mouse-handling, embedded graphics, etc)
it also supports multiple tabs and windows, convenient text zooming,
and remote debugging,

@display
@code{qtdomterm} [@var{options}] [[@code{-e}] @var{command} @var{argument} ...]
@end display

This runs the @var{command}, with the specified @var{argument}s,
in a sub-process using a pty.
The @var{command} defaults to the value of the @code{SHELL}
environment variable.

The @var{options} include:
@table @asis
@item @code{--connect} @var{host}@code{:}@var{port}
This does not start an inferior @var{command}.
Instead it connects to an already-running WebSocket server,
as you might start with @code{domterm --port @var{port} [@var{command}]}.

This is one way to run commands on a remote server.

@item @code{--help}
Print a help message with options, and then exits.
@item @code{--version}
Print the version number, and then exits.
@end table

@node jdomterm script
@section The jdomterm terminal emulator script

The @code{jdomterm} script is no longer recommended as a general terminal-emulator.
It can be useful when using Java as it does not require native code.

By default it runs a shell (@code{bash}), but there are a number of options.

@display
@code{domterm} [@var{frontend}] [@var{backend-arguments}]
@end display

The @var{frontend} argument specifies the front-end or user interface
application - i.e. some kind of browser.
The @var{backend-arguments} specify which command is run and how it is run.

@subsubheading Front-end (user interface) options

The @var{frontend} is one of the following:
@table @asis
@item @code{--browser}
@itemx @code{--browser=}@var{program}
@itemx @code{--chrome}
@itemx @code{--firefox}
@itemx @code{--qtdomterm}
@itemx @code{--qtwebengine}
Similar to the @code{ldomterm} options.

@item @code{--javafx}
This uses Java and the JavaFX WebView browser component (based on WebKit).
It needs OpenJDK 1.8 (or JDK 7 with JavaFX) but should otherwise
not need anything else.  Instead of a WebSocket server,
it uses JavaFX's Java/JavaScript bridge.

The UI (written in Java using the JavaFX toolkit) is minimal,
but right-clicking will bring up a popup menu.
This supports copy and paste, as well as
switching the input mode between line, character, or auto mode.

There are some glitches, and since JavaFX is not being actively
developed, this port is not a priority.

@item @code{--port} @var{portnum}
Start a WebSocket server, listening on the specified @var{portnum}.
(A @var{portnum} of 0 lets the system choose an available port,
which is printed out.  The default for @code{repl-client.html} is @code{8025}.)

No front-end is started automatically.
Instead, you load @code{repl-client.html} in your preferred web browser,
and it connects to the server.
If the server is listening on port @var{portnum} (rather than port 8025),
browse to @code{file:///path/to/DomTerm/repl-client.html?ws=//localhost:@var{portnum}}.

This allows you to use "any" modern browser as the client.
This is nice for development, as you can use the browser's
JavaScript console and debugger, DOM inspector, and so on.
The browser talks to server using WebSockets,
which modern browsers have built-in.
@end table

@subsubheading Back-end (command) options

The @var{backend-arguments} are one of:
@display
[@code{--pty}|@code{--pipe}|@code{-e}] [@var{command} @var{arg}...]
@code{--class} @var{classname} @var{arg}...
@end display

You can specify some other @var{command} and @var{arg} in
place of the default @code{/bin/bash}.

Specifically:

@table @asis
@item @code{-e} [@var{command} @var{arg}...]
@itemx @code{--pty} [@var{command} @var{arg}...]
This is the default on Unix-like systems (MacOs, GNU/Linux, BSD).
It runs @var{command} under a PTY.
Communication is by default character-by-character, but
can also be line-based.
@item @code{--pipe} [@var{command} @var{arg}...]
The input/output of the @var{command} is connected to DomTerm using
pipes.  Data communication is normally on a line-by-line basis.
(It is also possible to send single keystroke message.)
The implementations uses a Java @code{Process} object.
This should work on Windows, though it has not yet been tested.

@item @code{--class} @var{classname} @var{arg}...
This runs the @code{main} method of a specified Java class,
but with the standard streams (input, output, and error)
re-bound to a DomTerm window.

@example
CLASSPATH=@var{my-application.jar} domterm --class @var{my.ClassName} @var{arg}...
@end example

@end table

@node Sessions and Windows
@chapter Sessions and Windows

DomTerm can ``multiplex'' multiple terminal emulators
(similar to tmux or GNU Screen).

@subheading Terminology

A @dfn{session} is an emulated terminal with a process running under it.
A @code{domterm} @dfn{server} manages one or more sessions.
Typically, for each user there is at most a single @code{domterm} server
running at a time, though it is possible to create more:
The server is created as needed, and exits when there are no
more sessions.
(Note that @code{tmux} uses ``session'' to refer to multiple
processes running under the same server.)

Each session is usually displayed in a
@dfn{domterm window} or @dfn{window} for short.
If the session is not displayed in any window,
we say it is @dfn{detached}.
It is possible to display the same session in multiple windows.

A @dfn{top-level window} is window or tab in a web browser
(or embedded browser, like Electron).
A top-level window may be split vertically and/or horizontally
into one or more @dfn{tile}s (or panes).
Each tile has one or more @dfn{tabs}, where each
tab is a (sub-)window.  Only one of the tabs in a tile can be displayed
at a time.  These tabs are managed by domterm, and are
distinct from any tabs managed by a web browser or window manager
(though they have similar purpose).

A @dfn{non-session window} displays something other than
a DomTerm session.  The @code{domterm browse} command creates
a non-session window that displays a specified web page.
One use of this for is viewing documentation.

@subheading Managing sessions

Creating a new session is done by invoke the @code{domterm} command with the
@code{new} sub-command, or with no arguments.
See @ref{session-creating,Creating a new session} for details.

The sub-command @code{list} lists active session.

The sub-command @code{attach} connects to an existing session,
often a detached session.  You specify the session
with a @dfn{session-specifier}.

The can detach the current session using either the
keyboard short-cur @code{@mux-prefix d} or a menu command (Electron only).
More precisely, it marks the current session as @var{want-to-detach},
and closes the current window.  If there are other windows on the
session, they remain active, but the session is detached (rather than
exits) when the last window on the session closes.

When a session is detached, it saves the display state, so it can
be re-created if the session is later attached.
There is no auto-save in case of unintentional detach, such as
network failure or a browser crash, but there are plans to implement that.

@subsubheading Session specifiers

A session specifier has one of the following forms:
@table @asis
@item @var{pid}
The @var{pid} is the process ID (an integer) of the designed session.
@item @code{:}@var{session-number}
The session-number sequential number permanently associated with the session.
@item @var{session-name}
The @var{session -name} is a user-friendky name associated with the session,
and displaying in the tab-bar and title-bar of windows disdplay the session.
The default @var{session -name} is @samp{DomTerm:@var{session-number}}.
@end table

@node Paging
@chapter Paging and Pausing

@emph{This feature is experimental. It requires ``back-end'' support,
which has not been implemented yet for qtdomterm or @code{DomHttpServer}.
It also requires libwebsockets version 2.2 or greater.}

@emph{Key-bindings and other aspects are likely to change.}

DomTerm includes a builtin ``pager'' that gives you
functionality similar to programs like @code{less}.
You can set ``auto-pause'' which enters the pager each time
a full screen has been displayed.

We will discuss two related modes.
@dfn{Pager mode} does the following:
@enumerate
@item
The key-bindings are changed to be more
like the @code{less} program or Emacs ``view mode''.
@item
Automatically scrolling (on output) is turned off.
@end enumerate

@dfn{Pause mode}  additionally does the following:
@c NOTE The following lines are kludged in the Makefile.
@enumerate 3
@item
Suspends additional output from updating the display.
Any not-yet-displayed output is queued up,
and the sending (client process) will suspend too.
@end enumerate

You enter pause mode in two basic ways
@itemize
@item
You manually enter pause mode by typing Control-Shift-P.
@item
You automatically enter pause mode if automatic pausing is
enabled, and a ``full screen'' is displayed since last user interaction:
Any further output would cause part of the visible screen to scroll off.
@end itemize

To enable automatic-pause mode on Electron you can
check the @code{Automatic Pager} option in the right-click (context) menu.
(You can also type @code{ctrl-shift-P} (to enter pause mode);
then @code{shift-A} (to enable auto-pause);
and then @code{ctrl-shift-P} (to exit pause mode).
This is obviously too awkward and needs to change.)

To enter pager mode, you first have to enter pause mode,
and then type @code{P}.

The following key-bindings are in effect in pager or paused mode.
Some other these may be prefixed by a numeric @var{count}.
@table @asis
@item Shift-A
Toggle automatic-pause mode on and off.
(This is a klunky way tro do it and is likely to change.)
@item P
Toggle between pager and pause mode.
@item Control-Shift-P
Return to normal mode.
If paused, allow further output.
@item Space
Scroll @var{count} screenfuls down.
If we go past the bottom of the current output,
leave pause or pager mode, and allow further output.
Temporarily set automatic-pause mode, so that we pause again
if the screen fills up again.
@item Enter
Scroll @var{count} lines down.
Otherwise similar to Space.
@item PageUp
@itemx PageDown
Scroll @var{count} screenfuls up/down.
@item Home
Scroll to the current ``pager home''.  (Details needed ...)
@item Home
Scroll to the current ``pager home''.  (Details needed ...)
@end table

DomTerm does not yet implement a search command,
but most browsers have a find-in-page command,
commonly bound to Ctrl-F.

In addition the following work as in all other modes:
@table @asis
@item Control-Shift-Home
@itemx Control-Shift-End
Scroll to top/bottom.
@item Control-Shift-PageUp
@itemx Control-Shift-PageDown
Scroll one ``page'' up or down.
@item Control-Shift-Up
@itemx Control-Shift-Down
Scroll one line up or down.
@end table

@node Styling
@chapter Styling

The appearance of a DomTerm window is controlled by CSS stylesheets.

You can place stylesheet rules in the @ref{Settings,@code{~/.domterm/settings.ini}} file.
For example:
@example
style.user=
 |div.domterm @{ background-color: azure @}
@end example

You can also change the stylesheets using @code{domterm add-style} or
@code{domterm load-stylesheet} sub-commands.  For example:
@example
$ domterm add-style "div.domterm @{ background-color: azure @}"
@end example

@subheading Reverse video (dark vs light)

By default DomTerm uses uses dark-colored (black) foreground (text) on a
light-colored (off-white) background.
Reverse video switches these, by using a light-colored text
on a dark background.

You can enable reverse-video mode using the command:
@example
$ domterm reverse-video on
@end example
or in the @code{settings.ini} file:
@example
style.dark=on
@end example

Enabling reverse-video does not change stylesheet rules,
but instead sets the @code{reverse-video} attribute on the
top-level @code{domterm} element.  This is used to select
differe stylesheet rules for reverse-video.  For example
to change the background color input @code{input} lines
to a dark brown do this:
@example
div.domterm[reverse-video] span[std="input"] @{ background-color: #808200 @}
@end example

``Reverse-video mode'' is any style where the background is darker
than the foreground.  You can tweak individual style elements to
achieve such a style, but its better to first explicitly set reverse-video mode
(perhaps using the above command), because that
selects a consistent whole.

@subheading Color variables

DomTerm makes uses of
@uref{https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables,CSS Variables}, which is supported by most modern browsers.
The following variables define the main colors.

@table @code
@item --main-light-color
A light color used for the default background in normal mode,
or used for default foreground (text) in reverse-video mode.
@item --main-dark-color
A dark color used for the default foreground (text) in normal mode,
or used for default background in reverse-video mode.
@item --background-color
The color currently used for the main background.
Defaults to @code{--main-light-color} normally, or
@code{--main-dark-color} in reverse-video mode
(or after the SGR reverse-videa escape-sequence).
@item --foreground-color
The color currently used for the main background (text).
Defaults to @code{--main-dark-color} normally, or
@code{--main-light-color} in reverse-video mode
(or after the SGR reverse-videa escape-sequence).
@end table

A common desire is to change the default background color.
You can do any one of:
@example
div.domterm @{ --main-light-color: azure @} /* recommended method */
div.domterm @{ --background-color: azure @}
div.domterm @{ background-color: azure @}
@end example
Using @code{--main-light-color} is recommended because
it integrates better with the rest of the default stylesheets.

If you want to change to a dark background color,
it is recommended to you enable reverse-video mode instead (or in addition).

The following color variables define the standard 16
@uref{https://en.wikipedia.org/wiki/ANSI_escape_code#Colors,``ANSI colors''}:
@code{--dt-black},
@code{--dt-red},
@code{--dt-green},
@code{--dt-yellow},
@code{--dt-blue},
@code{--dt-magenta},
@code{--dt-cyan},
@code{--dt-lightgray},
@code{--dt-darkgray},
@code{--dt-lightred},
@code{--dt-lightgreen},
@code{--dt-lightyellow},
@code{--dt-lightblue},
@code{--dt-lightmagenta},
@code{--dt-lightcyan},
@code{--dt-white}.
The default definitions mostly match xterm.
For example @code{cyan} is @code{#00CDCD}.
It you can to change it to the standard VGA color, you
can add an override rule:
@example
div.domterm @{--dt-cyan: #00AAAA@}
@end example
The @code{mc} file browser by default sets the background to blue.
You can adjust the shade of blue used like this:
@example
div.domterm @{--dt-blue: #4040a0 @}
@end example

@subheading End-of-file background

DomTerm indicates the bottom area past the written
data with pale ``zebra stripes''.
If you want to disable this, do:
@example
div.domterm-spacer @{background: none @}
@end example
The spacer stripes alternatate between transparent and the value of @code{--spacer-color}.  You can change it thus:
@example
div.domterm-spacer @{--spacer-color: LemonChiffon@}
@end example

@subheading Prompt, input and error output
The @code{std} attribute of a @code{<span>} element is used to
indicate the logical kind of output.
The attribute @code{std='prompt'} marks a prompt before an input line,
while @code{std='prompt'} marks the input line itself.
(These attribute can be set using escape sequences in the prompt.)
You can change the colors used like this:
@example
span[std="prompt"] @{ background-color: lightgray @}
span[std="input"] @{ color: blue; background-color: inherit @}
@end example
Note the use of @code{inherit} to override the setting in the
default stylesheet.

An application or library can use escape sequences to distinguish
the error output (@code{stderr}) from regular output (@code{stdout}).
(Most programs don't emit these escape sequences.
It is difficult to do this reliably without modifying the
program or the tty subsystem.)
If so, by default, the text color is @code{red}; to turn this off, do:
@example
span[std="error"] @{ color: inherit @}
@end example

@subheading Background image

Setting a background image:
@example
/* Note: browser security may disallow file: URLs. */
div.domterm @{
  background-image: url('file:/usr/share/backgrounds/gnome/Mirror.jpg');
  opacity: 0.4 @}
div.domterm-spacer @{background: none @} /* optional but recommended */
@end example
You can reduce the opacity to make the text more visible.

Note browsers may restrict the use of @code{file:} URLs
because of the @uref{https://en.wikipedia.org/wiki/Same-origin_policy,same-origin policy}.
Work-arounds are being considered; please contact the maintainer if this
is a feature you want.

@node Java tools
@chapter Java tools

The @code{domterm.jar} by default includes various useful Java classes
(in addition
to all the JavaScript and styling for DomTerm itself).

The class @code{org.domterm.javafx.WebTerminalApp} creates a DomTerm
window in the current Java process, without requiring a server.
It is used by the @uref{https://www.gnu.org/software/kawa/REPL-Console.html#Running-a-Command-Interpreter-in-a-new-Window,Kawa @code{-wjavafx} option}.
This does require JavaFX.

The @code{org.domterm.DomHttpServer} is a webserver that can be used
as a server (back-end) component of DomTerm.
It does not use WebSockets but uses plain HTTP (with ``Ajax'') instead.
It only depends on the @code{HttpServer} that is a standard part of the JDK.

The @code{jdomterm} script starts up @code{DomHttpServer} along with
an optional front-end.

@node Tips
@chapter Tips and solutions

This page covers various topics, and may evolve to
a Frequently-Asked-Questions page.

Notes about ``@emph{Front-end support}'' discuss how
different front-ends may support some features differently.

@subheading Keyboard shortcuts

@table @asis
@c FUTURE @item Control-Shift-P
@c Enter/exit pager mode
@c FUTURE @item @mux-prefix
@c Prefix for Screen or TMux
@item @mux-prefix Control-D
@ On Electron toogle Developer Window.
@item Control-Shift-C
Copy the selected text to the clipboard.
(Control-C also works in line-editing mode.)
@item Control-Shift-V
Paste text from the clipboard.
(Control-V also works in line-editing mode.)
@item Control-Shift-S
Save the display to a file.
@item Control-Shift-I
Cycle between the input modes: automatic, to line, to character, and back.
The resulting mode is displayed temporarily.
@item Control-Shift-Home
Scroll to top.
@item Control-Shift-End
Scroll to bottom.
@item Control-Shift-PageUp
@itemx Control-Shift-PageDown
Scroll one ``page'' up or down.
(Specifically, the viewport height minus a height of one line.)
@item Control-Shift-Up
@itemx Control-Shift-Down
Scroll one line up or down.
@end table

The following are implemented by most browsers, rather than DomTerm,
so it may not work on all browsers.
@table @asis
@item Contriol-Shift-Plus
Zoom in (makes text bigger).
@item Control-Shift-Minus
@itemx Control-Minus
Zoom out (makes text smaller).
@item Control-0
``Un-zoom'' to normal size.
@item F11
Toggle full-screen mode.
@end table

@subsubheading Scrolling

@table @asis
@item Control-Shift-PageUp
@item Control-Shift-PageDown
Scroll a page up or down, respectively.
@item Control-Shift-Up
@item Control-Shift-Down
Scroll a line up or down, respectively.
@item Control-Shift-Home
@item Control-Shift-End
Scroll to top or bottom, respectively.
@end table

See also the bindings for @ref{Paging} mode.
@subsubheading Managing subwindows

The prefix key @mux-prefix when followed by some other key
controls sessions and windows.

@table @asis
@item Control-Shift-T
Create a new terminal in a new tab.
@item Control-Shift-N
Create a new terminal in a new pane (sub-window).
The new pane is create to the right or below the current pane,
depending on space.
@item @mux-prefix Control-Left
Create a new terminal pane to the left of the current one.
@item @mux-prefix Control-Right
Create a new terminal pane to the right of the current one.
@item @mux-prefix Control-Up
Create a new terminal pane above the current one.
@item @mux-prefix Control-Down
Create a new terminal pane below the current one.
@item @mux-prefix Left
Select the previous pane or tab.
@item @mux-prefix Right
Select the next pane or tab.
@item @mux-prefix @code{d}
Detach from current session and close the (sub-)window.
@end table


@subheading Copy and Paste

In character mode the ``standard'' keyboard shortcuts for copy and paste
(ctrl-C and ctrl-V) are sent to the backend program.
So instead DomTerm uses ctrl-shift-C to copy the selection to the clipboard,
and ctrl-shift-V to paste the contents of the clipboard.

Some front-end also have menu entries for copy and paste.

@emph{Front-end support}:
Middle-button paste (i.e. cliicking the middle button pastes the
contents of the @emph{selection}, rather than the clipboard)
works on qtdomterm, and chrome-based browsers.
It does not work in a Firefox browser window.

@subheading Save the console contents as HTML

Use the keyboard shortcut ctrl-shift-S to save the contents
of the DomTerm console as an HTML file.
Both qtdomterm and the Electron front-end also offer menu entries for this.

The saved file should be viewed with various css stylesheet
files in the @code{hlib} subdirectory.  You can create a symlink
to the @code{hlib} subdirectory in the DomTerm distribution.
The saved file also optionally makes use of some JavaScript,
in the same directory.
The JavaScript isn't essential, but it enables features like
hide/show buttons and dynamic line-(re-)breaking.

Images will preserve their URLs.
Relative URLs may need to be fixed, but absolute ones should be fine.
``Embedded'' images using a @code{data:} URL (including those
loaded with the @code{image} sub-command) will be saved embedded,
and Just Work.

The resulting file is actually an XHTML file, so you can use
XML tools to extract parts from or transform the output.

@emph{Front-end support}: The qtdomterm and the Firefox/XUL applications
bring up a file chooser, and let you save the file in any writable directory.
Other front-end bring up a prompt pop-up and only allow
saving to the Downloads area.
The JavaFX front-end currently does not support saving.

Note that if DomTerm is running in a browser window,
the browser's @code{Save page as ...} command is not useful.
It will save the original bare web page, before any DomTerm interactions
or other JavaScript modification.

@subheading Session names and session-specific styles

Each ``session'' (terminal window) has a name,
which by default has the form @code{"domterm-@var{N}"}
where @var{N} is an integer.
The session name is usually shown in the window title bar,
in the format @code{"@var{window-title} [@var{session-name}]"}.

You can change the session name by ``printing'' a certain escape sequence.
For example (using bash):
@example
echo -en "\e]30;@var{session-name}\007"
@end example

The @code{qtdomterm} application will give each session a
fresh name of the form @code{domterm-@var{N}}.
The Java WebSockets server will do the same.

The session name is used to set the @code{name}
attribute of the top domterm element,
so you can use it to select different rules for different sessions.
For example the following selects different background colors.

@example
div.domterm @{ background-color: #FFE @}
div.domterm[name="domterm-1"] @{ background-color: #FEE @}
div.domterm[name="domterm-2"] @{ background-color: #EEF @}
@end example

@subheading Browser quirks and limitions

(These can all change as browsers change or work-arounds are implemented.)

Middle-button paste: Works with Chrome and qtdomterm (on Linux);
does not work on Firefox.

Exiting the inferior process can sometimes fail to automatically
close the DomTerm window, due to browser security limitations.
It currently works on Google Chrome, but not Firefox.

Saving the console display to a file in a browser may
save to the browser's ``Downloads'' area.
You may be able to save the file elsewhere, depending
on the browser and its settings.

Using line-editing mode with the brower's builtin editor
may exhibit various quirks.

Microsoft Edge does at time of writing not handle the @code{tab-size}
CSS property, so on that browser tab characters are always converted to spaces.

@subheading Adding domterm or qtdomterm to the desktop

@subsubheading On Gnome or KDE

Copy @code{domterm/qtdomterm.desktop} or
@code{qtdomterm/qtdomterm.desktop} to either
@code{usr/share/applications} (if @code{domterm} is installed
in @code{/usr/bin} and you want it accessible to everyone),
or in @code{~/.local/share/applications} (if you only wish to make
accessible to a single user).

@subheading Environment variables set

The DomTerm back-ends set various enviromnent variable
when they start up a process.

@code{TERM} is set to @code{"xterm-256color"}.
@code{COLORTERM} is set to @code{"truecolor"}.

The @code{DOMTERM} variable is set to a semicolon-separate
list of information about DomTerm and how it was invoked.
The specific list is subject to change.

An example when running on @code{qtdomterm}:
@example
QtDomTerm;version=0.80;tty=/dev/pts/3
@end example
The Electron front-end may yield:
@example
version=0.80;electron=1.3.13;libwebsockets=2.1.1;tty=/dev/pts/1
@end example

Checking the @code{DOMTERM} variable is the normal way to
check if we're running in a DomTerm terminal.  It is not
foolproof, since you could (for example) spawn off an @code{xterm},
which would not reset the @code{DOMTERM} variable.
To make it more robust, you can compare the output of the
@code{tty} command or the @code{ttyname} function with the
value specified after @code{tty=}.
However, @code{tty=} might not be specified unless runnng under a pty.

@code{WINDOWID} is not set - in fact @code{qtdomterm} unsets it.
There seem to be some problems setting it with Qt.
This variable is not set by Wayland.

@subheading Setting the Bash shell prompt

You can place the following in your @code{~/.bashrc}
to take advantage of DomTerm features:

@example
if [ "$PS1" != "" ]
then
  # Optionally override the system default - for all terminals
  PS1='$ ' # or whatever

  # Check if the DOMTERM variable includes the string "tty=@var{ttyname}"
  # where @var{ttyname} is the output from the tty command
  case ";$DOMTERM;" in
    *";tty=`tty`;"*) ;;
    *";tty="*) unset DOMTERM;;
  esac

  if [ -n "$DOMTERM" ]
  then
    # Add some DomTerm-specific escape sequences
    PS1='\[\e[19u\e[16u\]▼\[\e[17u\e[14u\]'$PS1'\[\e[15u\]'
    PS2='\[\e[14u\]'$PS2'\[\e[18u\]'
  fi
fi
@end example

This causes the prompt to have the @code{prompt} style
(specifically to be in a @code{<span std="prompt">} element),
while the remainder of the current line gets the @code{input} style
(specifically, in a @code{<span std="input">} element).
The appearance of these styles can be customized with CSS stylesheets.

Furthermore, this prompt enables text folding:
a @ref{Hide/show buttons,hide/show button}
(click on the @code{▼} character), which hides/shows the output
from the command.

See the @ref{Wire byte protocol} section for the details.

(The @code{"\["} and @code{"\]"} are bash syntax,
and are equivalent to readline's @code{"\001"} and @code{"\002"}.
They are used to indicate escape sequences that don't move the cursor,
which is needed for readline to calculate the column position.)

@subheading Showing man pages as html

To view the @code{bash} man page inline you can do the following.
This works best with Automatic Pager set.

@example
man -Hcat bash 2>/dev/null|domterm hcat
@end example

@node To do
@chapter Ideas and projects for DomTerm

@subheading Basic terminal emulator functionality

@subsubheading Document any discrepances from xterm and ANSI

While implementing all of the
@uref{http://invisible-island.net/xterm/ctlseqs/ctlseqs.html,features of xterm}
is probably not feasible, we should at least have a list of
anything we don't implement, or implement differently from xterm.

See also the @uref{http://www.ecma-international.org/publications/standards/Ecma-048.htm,ECMA-48 standard}.

Error recovery and state transitions should follow
@uref{http://www.vt100.net/emu/dec_ansi_parser,this}.

@subsubheading  Use vttest for testing

The xterm distribution includes @uref{http://invisible-island.net/vttest/,vttest}.
Most of the tests work now, but there are more worth fixing.

@subsubheading Support Sixel graphics

@uref{https://en.wikipedia.org/wiki/Sixel,Sixel} is an old raster
image format supported by DEC terminals and some programs, including xterm.
It is interesting because some programs (such as gnuplot) can use Sixel
to interleave graphics and text, without requiring separate windows.

This @uref{http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/,JavaScript utility} may be useful in converting raster data (post-sixel-decoding) to PNG, which could the be displayed with a @code{data:} URI.
Alternatively, a @code{<canvas>} element could be used.

@subsubheading Recognize URLs in console

A ``word'' that has the form of a URL @emph{or} that start with ``@code{www.}''
should be handled as an ``implicit link'':  Hovering over them styles
them as links, and clicking them opens the URL.
The same should be done with email addresses.

@subsubheading Improve copy and paste

Handle exporting html to clipboard.

Fix paste in line-editing mode.

Think about how to do multi-line paste.

@subheading Improve standalone terminal emulator

Handle saving and truncating scrolled-out output.

While @code{qtdomterm} supports tabs, moving a tab from from
one window to another window does not work.

Implement ``drop-down'' mode.

@subheading Support other embeddable browsers

Some toolkits to explore for integrated browser/application:
@itemize
@item
@uref{https://bitbucket.org/chromiumembedded/cef,Chromium Embedded Framework}
@item
@uref{http://lwn.net/Articles/647921/,Mozilla Servo}
@item
@uref{http://atom.io,Atom/Electon}
A possible start is @uref{https://atom.io/packages/term2,term2}.
@item
@uref{http://nwjs.io/,NW.js} (formerly node-webkit).
@item
@uref{http://webkitgtk.org/,WebKitGtk+}
@end itemize

@subsubheading Using alternate window managers

DomTerm includes a ``window manager''
(implemented
using @uref{http://golden-layout.com/,GoldenLayout})
that supports panes and tabs.
If DomTerm is integrated in an application with its
own window manager, such as Atom or Visual Studio Code,
it would make sense to instead integrate with the latter manager.

Similarly, when running under a
@uref{https://en.wikipedia.org/wiki/Tiling_window_manager,tiling window manager}
using the latter to manage panes and tabs is likely preferable.

@subsubheading Tools and examples for Atom or Electron

Atom packages are in @code{~/.atom/packages}.
Seemingly helpful tutorial:
``@uref{https://www.sitepoint.com/write-atom-packages-using-vanilla-javascript/,
How to Write Atom Packages Using Vanilla JavaScript}''.

Web browsers for Atom include
@uref{https://github.com/gabceb/atom-web-view,atom-web-view} (aka web-view),
or @uref{https://github.com/gstack/atom-browser-webview,atom-browser-webview}.
Neither of them work well, probably because of Atom API changes.

Terminal emulators for Electron:
@url{https://github.com/sedwards2009/extraterm,Extraterm} (interesting, uses CodeMirror).
@url{https://github.com/vshatskyi/black-screen,Black Screen} (extra shell features).

Terminal emulators for Atom:
@uref{https://atom.io/packages/term3,Term 3}.
@uref{https://atom.io/packages/terminal-plus,terminal-plus}.
@uref{https://atom.io/packages/atom-terminal-panel,atom-terminal-panel}.
@uref{https://github.com/romgrk/termrk,Termrk}.

@uref{https://www.npmjs.com/package/electron-tabs,Tabs for Electron}
(compatible with @uref{https://github.com/bevacqua/dragula,dragula}).

Various Electron @uref{https://github.com/sindresorhus/awesome-electron,Awesome links}
@uref{https://electron.atom.io/community/,Community links}.

@subheading Readline style hooks and improvements

The idea is the line-editing mode would provide the
functionality of readline or similar programs.

@subsubheading Improved history support in line-editing mode

While DomTerm has basic history support (previous/next line),
we should implement searching (ctrl-R in readline),
as well as saving the history (in local storage).

@subsubheading Readline hooks to recognize when it's running under DomTerm

The idea is readline would delegate basic line editing
(and re-display) to DomTerm, while DomTerm would call back
to readline for command completion, history, etc.

This has a couple of advantages over plain readline:
One is to have mousing actually work (i.e. no more
readline not being able to move the cursor on mouse-clicks).
Another advantage is local editing, which is a benefit
over slow links (such as satellites) or when you don't
want to interrupt the server needlessly.

Readline should at least behave as if the screen width were infinite,
delegating line-wrapping to DomTerm.

@subsubheading Customizable key sequences, as in readline

@subsubheading Event forwarding to inferior

A process may "print"/paint graphics with event handlers.
For example a button.  On clicking the button, the click
should be bundled as an event objects sent back to the inferior.

@subheading Saved notebooks

A "notebook" is a saved (and potentially executable)
representation of a session.

IPython/Jupyter has a
@uref{https://ipython.org/ipython-doc/3/notebook/nbformat.html,JSON encoding for "notebooks"}.
This is flexible and extensible, but requires special tools.

The DomTerm notebook format should just be a simple html page.
Essentially a serialization of the DOM.  The page may include
some generated header information and metadata.  It may include
references to JavaScript that would allow former execution,
as well as viewing actions (like hide/unhide, wrap-to-fit, etc).
This references should be simple and relative, so the actual
JavaScript loaded can depend on context.

The format must be XML-compatible (XHTML) so it can be
parsed by XML tools such as XSLT.

Specific format TBD.

The html page must be viewable and look reasonable in a browser even
if JavaScript library or style files are missing or JavaScript is
disabled.

A notebook may be include additional resources in other files,
such as images.  If notebook  consists of multiple files,
they should be bundled in a zip archive (like LibreOffice does).

Tools to convert to and from Jupyter format would be nice,
so we should avoid gratuitous conceptual incompatibility.

@subheading Detachable and remote sessions

Detachable sessions means that a front-end
can disconnect from a session, while the session (child process) persists.
The same or a different front-end can later re-attach to the session

The GNU Screen and tmux programs support detachable sessions
(along with many other features).  These know the display state,
so they can re-create it on a re-attach.  The problem is that
DomTerm has more complex state and features, which you won't
be able to use with screen or tmux.

A simpler solution that only deals with session management is
@uref{http://www.brain-dump.org/projects/abduco/,abduco},
or @uref{http://dtach.sourceforge.net,dtach}. These just ``pass through''
escape sequences, without trying to simulate the display.
The downside is this depends on client re-draw (using
sigwinch or ctrl-L), which is fine for a program like emacs,
but doesn't redraw previous commands, and doesn't work with a
console-based REPL.

Handling explicit detach can be done by having the front-end serialize
the important aspects of state, and send it back to the back-end.
On a re-attach, the back-end can send the saved front-end state back
to the front-end.

However, this doesn't handle unexpected detaches, as when the
connection dies.  To support this, the back-end has to know the
critical parts of the front-end state.  This means the back-end
has to track the front-end state by simulating the actions of
the various escape sections.  One way to do that is to use a
@uref{https://github.com/dhamaniasad/HeadlessBrowsers,``headless'' web browser}
such as (the presumably rekativey heavy-duty) @uref{http://phantomjs.org/,PhantomJS}.
Chromium has a @uref{https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md,@code{--headless} option}.
Using QtWebEngine in headless mode makes sense if we also use qtdomterm.

See also @uref{https://mosh.org/,Mosh} (also @uref{https://lwn.net/Articles/722923/,LWN article}), and @uref{https://mistertea.github.io/EternalTCP/,EternalTerminal}.

@node Technical documentation
@chapter Technical documentation

@menu
* DOM structure::
* Wire byte protocol::
* The DomTerm JavaScript class::
* Processes and security::
* Architecture notes::
@end menu

@node DOM structure
@section DOM structure

The JavaScript code works by DOM manipulations of
a top-level @code{div} element, and assume that element
has a certain well-behaved form.

@table @asis
@item @var{domtern-element} ::= @code{<div class="domterm">} @var{domterm-toplevel} @code{</div>}
A top-level ``DomTerm window'' is a @code{<div>} element
whose @code{class} is @code{domterm}.

@item @var{domterm-toplevel} ::= @var{internal-div-elements} @var{block-content}@sup{*}

You don't need to create @var{domterm-toplevel} - it is created and managed by
DomTerm, based on data from the back-end.

Currently, the @var{block-content} is a single
@code{<div class="interaction">}
with an @code{id} attribute of the form @code{@var{xxx}_main}.
This is the xterm ``normal screen buffer''.

More structure will be supported, for example individual @code{<div>}
to wrap each command and its output.

@item @var{internal-div-elements}
One or more invisible @code{<div>} elements used by the implementation.

@item @var{block-content} ::= @var{logical-line} | @code{<div>} @var{block-content}@sup{*} @code{</div>} | @var{opaque-line}

@item @var{logical-line} := @code{<div class="domterm-pre">} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
@itemx @ @  | @code{<pre>} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
@itemx @ @  | @code{<p>} @var{line-content}@sup{*} @var{hard-nl} @code{</p>}
A @var{logical-line} is one or more ``rows'' (separated by @var{soft-line}s),
consisting of character and other @code{inline} data,
ending with @var{hard-nl} representing an explicit newline.

The intent is that @code{<div class="domterm-pre">}, @code{<pre>} and @code{<p>} are treated logically
the same, but @code{<div class="domterm-pre">} (or @code{<pre>}) will be monospace,
while @code{<p>} can use other fonts and styling.
The line-breaking algorithm uses the width of the line,
not the number of characters, so it should also work for @code{<p>} elements.

Normal terminal output will create @code{<div class="domterm-pre">} elements,
rather than @code{<pre>}, because @code{Copy} command on some browsers (at least
current Firefox) adds extra newlines.

@item @var{line-content} ::= @var{text} | @code{<span>} @var{line-content}@sup{*} @code{</span>} | @var{soft-nl} | @var{input-line} | @var{other-content}

@item @var{hard-nl} ::= @code{<span line="hard">&#A;</span>}
An explicit newline. Has a @code{"\n"} text node as its sole child.

@item @var{soft-nl} ::= @code{<span line="soft"></span>}
An implicit newline, inserted by DomTerm when a line overflows.
Has no explicit text content, but CSS adds a @code{"\n"}
as @code{before} content.
CSS by default also add a continuation arrow.

@item @var{input-line} ::= @code{<span id="input1" std="input" contenteditable="true">} @var{text} @code{</span>}
The location of the input cursor.
In char-mode the @var{text} is empty.  In line-mode contains
the current input line.  Also used for previous input lines,
but without @code{contenteditable} set.
Referenced by the @code{inputLine} field of the DomTerm object.

@item @var{opaque-line}
A non-empty block-level element that isn't navigable
at the level of rows and columns.
For example a @code{<table>}.
It is treated as a single empty line.
@end table

@subsubheading Lines and columns

This section discusses the mapping between the nested DOM structure
and the terminal's lines and columns.

In a well-formed tree, all line-breaks have the form
of @code{<span>} element with a @code{line} attribute.
The child of a @code{<span>} element is either a text node
consisting of only a newline, or there are no children
(and a newline is added using CSS styling).  Either way it is
treated as a single line-break.

Inserting HTML may also include @code{<br>} elements and text
containing newlines.  These are not handled consistently.
Ideally, we should convert newlines in @code{pre}-style elements
to @code{<span line="hard">} elements.

The last child of a non-empty block-level element (@code{<div>}, @code{<pre>}
etc) should be either another block-level element or a line-break.
(We could also allow a @code{<span>} whose last element is a line-break,
but isn't clear if this is useful or desirable.)
Inserting HTML should insert if needed final line-break (though
it currently doesn't).  Alternatively, we can treat a missing line-break
as an implicit line-break; currently this is not handled consistently.

A ``line'' is then the text and elements between two
(explicit or implicit) line-breaks.

``Opaque elements'' include @code{<img>}, @code{<svg>},
@code{<object>}, and @code{<iframe>}.  These are treated
as single character, taking up a single ``column''.

The ``characters'' of a line are those in text nodes in the line, plus
opaque elements.

@anchor{command group}
@subsubheading Command groups

A @dfn{command group} is the set of input and output lines for a single
user command.

@table @asis
@item @var{command-group} ::= @code{<div class="command-group">} @var{command-input-line}@sup{+} @var{command-output}@sup{?} @code{</div>}
Usually there is a single @var{command-input-line},
but there may be more than one if there are continuation lines.
@item @var{command-input-line} ::= @code{<pre>} @code{<span std="prompt">} @var{prompt-text} @code{</span>} @code{<span std="input">} @var{input-text} @code{</span>} @code{</pre>}
A @var{command-input-line} is @code{logical-line} which (at least normally)
has the form of a prompt followed by the typed input command.
@item @var{command-output} ::= @code{<div class="command-output">} @var{block-content}@sup{+} @code{</div>}
The output from the command.
Normally, each @var{block-content} is a @var{logical-line}.
The @code{<div class="command-output">} element may have the
@code{domterm-hidden} attribute if it is hideable.
@end table

@anchor{Hide/show buttons}
@subsubheading Hide/show buttons

A hide/show button is a clickable toggle ``button'' that controls
whether certain ``associated output'' is shown or hidden.
For example the ``associated output'' of a shell command could be the
set of output lines from the command.  Initially, the output is in
the shown state, and the button displays a ``hide'' icon.
Clicking the button will hide output lines, as well as changing the
button to display a ``show'' icon.  Clicking the button again
changes the icon to the ``hide'' icon and unhides the output lines.

@table @asis
@item @code{<span std="hider"} [@code{domterm-hiding="true"} or @code{"false"}]@code{>} @var{hide-icon} @code{</span>}
This is a hide/show button.  The @var{hide-icon} is either empty or one of
the strings with odd-numbered index in DomTerm's
@code{showHideMarkers} property.
The value of the @code{showHideMarkers} property is an array of strings,
where the even-numbers elements are ``show'' icons, and
the following odd-numbered elements are the corresponding ``hide'' icons.
It is suggested (but not required) that these icons be single
graphic characters.
Good choices are @code{"\u25B6"} (@code{@U{25B6}} ``black right-pointing triangle'')
for ``show'', and
@code{"\u25BC"} (@code{@U{25BC}} ``black down-pointing triangle'') for ``hide''.

The attribute @code{domterm-hiding} must be @code{"true"}
or @code{"false"}; if missing it defaults to @code{"false"}.
Its value is flipped on each click,

If you are unsatisfied with the existing icon choices you can
either set @code{showHideMarkers} to other strings,
or you can use CSS to change the look of the icons.
For example to use @code{[-]} and @code{[+]} use these CSS rules:
@example
span[std="hider"][domterm-hiding="true"]:after @{ content: "[+]" @}
span[std="hider"]:after @{ content: "[-]" @}
@end example
In this case, you probably want the @var{hide-icon} text in
the @code{<span>} to be empty.
@end table

The ``associated output'' for a hide/show button
is the set of sibling elements following the button,
as well as sibling elemets of the button's parent
(assuming that parent is a @code{<pre>} or @code{<p>} element).
Only elements that have the @code{domterm-hidden} attribute are affected.
Hiding is done by changing the value the @code{domterm-hidden} from
@code{"false"} to @code{"true"}; un-hiding changes it back to @code{"false"}.
This is using a CSS style rule that sets the @code{display} property
of an element to @code{none} when @code{domerm-hidden} is @code{true}

A future extension would allow @emph{lazy} associated output:
The initial state is hidden, and the back-end does not provide
the output until it is requested, by clicking the hide/show button.
Lazy output is useful for displaying and inspecting large
(or even infinite) data structures, such as as a directory hierarchy
or a complex object graph.

@subsubheading Alternate screen buffer

Xterm supports an ``alternate screen buffer'' which is used
by character-based programs like emacs.
Switching to the alternate buffer creates a new @code{<div class="interaction">},
with an @code{id} attribute of the form @code{@var{xxx}_alternate}.
It is the sibling of the normal screen buffer
(with @code{id} attribute of the form @code{@var{xxx}_normal}).
This @code{<div>} contains one or more @var{logical-line}s.
Returning to the normal screen deletes the @code{<div>} for the
alternative screen, along with all of its contents.

@anchor{DOM-pretty-printing}
@subsubheading Pretty-printing and line-breaking

@table @asis
@item @code{<span class="pprint-group">} @var{contents} @code{</span>}

A ``logical block'' of content that should be printed together,
on the same line, if possible.
If there is a prefix, it precedes the @code{"pprint-group"} element.
If there is a per-line prefix,
it is in a @code{<span class="pprint-prefix">} preceding element.
If there is a block suffix, it follows the @code{"pprint-group"} element.

@item @code{<span class="pprint-prefix">} @var{per-line-prefix} @code{</span>}
A pre-line prefix.  This must be the previous sibling
of a @code{<span class="pprint-group">} element.
It is displayed just before the logical group, and also
for each continuation line, at the same indentation.

@item @code{<span class="pprint-indent" delta="@var{num-chars}" />}
@itemx @code{<span class="pprint-indent" block-delta="@var{num-chars}" />}
@itemx @code{<span class="pprint-indent" indentation="@var{text}" />}

Add extra indentation to following continuation lines.
A @code{delta="@var{num-chars}"} changes the indentation
to @var{num-chars} characters relative to the current horizontal position.
A @code{block-delta="@var{num-chars}"} changes the indentation to
@var{num-chars} characters relative to the start of the current logical block.
Specifying@code{ indentation="@var{text}"} specifies @var{text}
as an extra per-line prefix.
The extra indentation is reset at the end of the logical block.

@item @code{<span line="@var{kind}" />}
Represents a conditional newline of the specified @var{kind},
which can be @code{fill}, @code{linear},
@code{miser} (currently the same as @code{fill}),
or @code{required}.

@item @var{indentation} ::= @code{<span class="pprint-indentation">..</span>}
These represent actual calculated indentatation.
They are only inserted when if a line-break is inserted,
and removed if the line-break is removed.

@item @code{<span line="@var{kind}" @var{line-attribute}... > [@var{pre-break-child}] [@var{non-break-child}] [@var{indentation}] [@var{post-break-child}] </span>}
@itemx @code{@var{line-attribute} ::= breaking="yes|no" | pre-break="@var{pre-break-text}" | post-break="@var{post-break-text}"}
@itemx @code{@var{pre-break-child} ::= <span class="pprint-pre-break">@var{contents}</span>}
@itemx @code{@var{post-break-child} ::= <span class="pprint-post-break">@var{contents}</span>}
@itemx @code{@var{non-break-child} ::= <span class="pprint-non-break">@var{contents}</span>}
A generalized optional line-break.  You can specify contents to
insert @emph{before} the break (when there is a break) either with
a @code{pre-break} attribute or with a @code{pprint-pre-break} element.
Similarly, content after the break
can be specified using either a @code{post-break} attribute
or a @code{pprint-post-break} element.
(The @var{indentation}, if any is automatically inserted before the post-break-content.)
To specify contents to be used when there is no break,
use a @code{pprint-non-break} element.
@end table

@node Wire byte protocol
@section Wire byte protocol

DomTerm mostly handles standard @uref{https://en.wikipedia.org/wiki/ANSI_escape_code,ansi/xterm escape sequences}.
This section documents DomTerm-specific extensions.
(@emph{Future:} We should also document what xterm features aren't implemented.)

@strong{The following code sequences
may change based on experience and feedback.}

@emph{Notation:}
Literal characters are written as quoted string literals with
escape sequences as understoof by bash's @code{echo -e}.
Specifically @code{"\e"} is an escape; @code{"\a"} is alert (bell);
@code{"\xHH"} is the 8-bit characters whose value is HH (hexadecimal).

@subsection Special sequences sent by back-end and handled by DomTerm

@table @asis
@item @code{"\e[3J"}
Erase the scrollback buffer (i.e. any lines above the home line).
(This is an xterm feature.)

@item @code{"\e[>0c"}
Request Secondary Device Attributes.
(This is a standard request for xt100style terminals, including xterm.)
DomTerm responds @code{"\e]990;XXYYYZZ;0c"},
where the number @code{XXYYYZZ} is derived from the DomTerm
version number @code{"XXX.YYY.ZZ"}.

@item @code{"\e]30;" @var{name} "\a"}
Sets the ``session name'' to @var{name}, which is shown in the window title.
Specifically sets the @code{name} attribute of the top-level
domterm @code{<div>} node to @var{name}.  This can be used
to enable stylesheet rules to only apply to specfic DomTerm windows.
If an active CSS stylesheet contains:

@example
div.domterm[name="@var{name}"] @{ @var{rules} @}
@end example

then the @var{rules} are only active for a DomTerm element whose
session name is @var{name}.

@item @code{"\e]72;" @var{html-text} "\a"}
Insert HTML text.

The HTML is sanity-checked for safety.
It needs to be well-formed XML; thus to write a horizontal line
you must write @code{<hr/>} (with the extra ``@code{/}'').

The actual policy for allowed elements and attributes
can be changed by overwriting the @code{elementInfo}
and @code{allowAttribute} functions in @code{terminal.js}.
The default policy is a work-in-progress.

@item @code{"\e]73;" key "\a"}
@itemx @code{"\e]74;" key "\a"}
Simulate pressing @var{key}.  Used by auto-line mode.
The @code{73} variant supresses echo.

@item @code{"\e]104;" @var{op} @code{,} @var{url} "a\n"}
Create a new sub-window (pane), based on the @var{op}.
This displays the @var{url} webpage in an @code{<iframe>}.

@item @code{"\e]105;" @var{op} @code{,} @var{saved-url} "a\n"}
Create a new sub-window (pane), based on the @var{op}.
This is displays the @var{saved-url}, a previously saved terminal session.

@item @code{"\e[12u"}
Start of error output.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"error"}.
The default style is to display the text in red.

@item @code{"\e[11u"}
End of error output.

@item @code{"\e[14u"}
Start of prompt.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"prompt"}.
The default style is to display the text in green.

@item @code{"\e[13u"}
End of prompt.
The prompt is included in selections that surround it.

@item @code{"\e[18u"}
End of non-selectable prompt.
The prompt is not part of the text content of the document,
and is not included in selections.
The prompt string must be plain text with no styling.
You can use this for all prompts, but it is especially recommended
for continuation lines, such as the shell's @code{PS2} prompt.

@item @code{"\e[15u"}
Start of an input line.
This also implicitly ends a (selectable) prompt.
The input line is implicitly terminated by a @code{'\n'}
(carriage return).

@item @code{"\e[16u"}
@itemx @code{"\e[17u"}

Delimit a @ref{Hide/show buttons,hide/show "button"}, with @code{"\e[16u"} before
and @code{"\e[17u"} after.

@item @code{"\e[19u"}

Start a @ref{command group}.
This command implicitly does a "fresh line" and ends any existing command group,
You can write this string before writing
an input prompt string.

@item @code{"\e[20u"}
Starts a "fresh line": If at the beginning of line, does nothing.
Otherwise moves to the start of a new line.

@item @code{"\e[80;97u"}
@itemx @code{"\e[80;99u"}
@itemx @code{"\e[80;108u"}
@itemx @code{"\e[80;112u"}
Set input editing mode.
The value 99 (@code{'c'}) sets character mode;
the value 108 (@code{'l'}) sets line-editing mode.
The value 97 (@code{'a'}) set automatic mode,
which switches between character mode and line-editing mode
based on the mode of the inferior process (when using a PTY).
The value 112 (@code{'p'} for "pipe") is like line-editing mode,
but the inferiors doesn't echo the input, so we have to do it.
This mode is useful when the input is a pipe or some other non-tty stream.

@item @code{"\e[81u\n"}
Requent to send the state of the window as a @code{WINDOW-CONTENTS} response.

@item @code{"\e[90;" @var{op} "u\n"}
Create a new sub-window (pane), based on the @var{op}.

@item @code{"\e[99;99u"}
End-of-file on the output stream.
Calls the @code{eofSeen} method of @code{DomTerm},
which may close the current window or other appropriate action.

@item @code{"\x13"} @var{sequence} @code{"\x14"}
@itemx @code{"\x13"} @code{"\x16"} @var{sequence} @code{"\x14"}
An ``urgent'' command sequence:
Same as @var{sequence}, but at higher priority.
If the terminal is in the middle of some other escape sequence
(or a multi-byte UTF-8 sequence), save the state,
evaluate @var{sequence}, and restore the state.
For the second form only:
When DomTerm receives a sequence of bytes that contains
an urgent sequence, it will execute that before handling preceding bytes.

These are normally used for commands from the backend @code{domterm} server.
@end table

@subsubsection Stylesheet manipulation

@table @asis
@item @code{"\e]90;\a"}

A request to return a list of the stylesheets in the document.

Result to client: @code{"\x9D"} @var{stylesheets} @code{"\n"}

Each stylesheet is a JSON-formatted string, separated by @code{"\t"},
suitable for printing by the @code{list-stylesheets} command.

@item @code{\e]91;"} @var{index} @code{"\a"}
Disable the stylesheet that has index @var{index} in the list of
stylesheets in the document.

Result to client: @code{"\x9D"} @var{message} @code{"\n"}
where @var{message} is empty if there was no problem,
and is otherwise an error message.

@item @code{\e]92;"} @var{index} @code{"\a"}
As above, but enable the specified stylesheet.

@item @code{\e]93;"} @var{index} @code{"\a"}
Return the contents of the specified stylesheet.

On success the result is @code{"\x9D"} @var{rule}@sup{*} @code{"\x9D"}
where each is a JSON-quoted string.
On failure, the result is a (non-quoted) error message.

@item @code{\e]94;"} @var{rule} @code{"\a"}
If necessary, create a new temporary stylesheet,
and add the specified JSON-quoted rule to the end of it.

@item @code{\e]95;"} @var{name} @code{","} @var{styles} @code{"\a"}
@itemx @code{\e]96;"} @var{name} @code{","} @var{styles} @code{"\a"}

Create or replace a stylesheet with the given @var{name}.
If there is a @code{<style>} with a @code{name} attribute equal to @var{name},
it is replaced; otherwise a new one is created, with its @code{name} set to @var{name}.
The @var{styles} is the literal contents of the new stylesheet;
it becomes the child of the @code{<style>} element (as a single text node).
Both @var{name} and @var{styles} are strings in quoted (JSON) format.

If the code is @code{96}, no response is sent.
If the code is @code{95}, the result to the client is
@code{"\x9D"} @var{index} @code{"\n"} where @var{index}
is the index of the replaced or created stylesheet.

@end table

@anchor{escapes-pretty-printing}
@subsubsection Pretty-printing

"Pretty-printing" refers to breaking a text info multiple lines
in a way to minimize the number of lines needed while preserving
logical structure and adding helpful indentation.
DomTerm implements the features and concepts
of the @uref{https://dspace.mit.edu/bitstream/handle/1721.1/6503/AIM-1102.pdf,Common Lisp pretty-printing} feature.
The following uses the latter's terminology.
Doing line-breaking in DomTerm means it can
dynamically adjust for varying line width.

@table @asis
@item @code{"\e]110\a"}
@itemx @code{"\e]110;"} @var{per-line-prefix} @code{"\a"}
Start a logical block, followed by sections of the output
that logically belong together, and that DomTerm will
try to group on the same line.
If the group needs to be broken into multiple lines,
continuation lines will be indented to the current horizontal position.

If there is a ``prefix'' before the group,
send it to DomTerm before this command.
On the other hand, if there is a @var{per-line-prefix}
(a JSON-quoted string) it will written both at the current position,
and at the same position in any continuation lines.

@item @code{"\e]111\a"}
End a logical block.
If there is a "suffix", send it to DomTerm after this command.

@item @code{"\e]112;"} @var{amount} @code{"\a"}

Adjust identation of future lines (in the current block).
The @var{amount} is measured in characters, and is relative to the
current position.  A negative @var{amount} is allowed, as long as you
don't end up to the left of any per-line prefixes.

@item @code{"\e]113;"} @var{amount} @code{"\a"}

Similar to the @code{112} command, but @var{amount}
is relative to the start of the current block (after any per-line prefix).

@item @code{"\e]114;"} @var{prefix} @code{"\a"}

Adds an extra per-line prefix for future lines,
specified by @var{prefix}, a JSON-quoted string.

@item @code{"\e]115\a"}

Add a ``fill''-type conditional newline.

@item @code{"\e]116\a"}

Add a ``linear''-type conditional newline.

@item @code{"\e]117\a"}

Add a ``miser''-type conditional newline
(which is currently treated the same as a ``fill'' newline).

@item @code{"\e]118\a"}

A required newline.
This should be used (rather than a plain newline)
when inside a logical-block.

@item @code{"\e]115;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]116;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]117;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]118;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}

Line-breaks of the types given above, but with specific strings to be used.
Each string is JSON-quoted.
The @var{nonbreak} string is used if the line is not broken here.
If there is a break, the @var{prebreak} string is used before the break,
and the @var{postbreak} string is used after the break (following any indentatioon and per-line prefixes).

For example to insert a hyphenation point, you might
write:
@example
\e]115;"-","",""\a
@end example
German used to have a rule where ``ck'' would be hyphenated as ``k-k'',
as in Zucker (suger):
@example
Zu\e]115;"-k","k","ck"\aer
@end example
@end table

@subsection Special sequences sent by DomTerm to back-end

@table @asis
@item @code{"\x92" @var{name} " " @var{data} "\n"}
General format for reporting events,
where @var{name} is the name of the event (an identifier).
The @var{data} can be any text not including a @code{"\n"}
(or other control character); JSON format is used in some cases.

@item @code{"\x92" "WS " @var{rows} " " @var{cols} " " @var{height} " " @var{width} "\n"}
Report window size from DomTerm to the back-end.

@item @code{"\x92" "KEY " @var{kcode} " " @var{kchars} "\n"}
Used by auto-line mode to report a key event to back-end.
The @var{kcode} is a numeric key code,
while @var{kchars} is as string literal (JSON-formatted)
of the characters that are normally transmitted to the back-end.
(If the events was a key-press event, the @var{kcode} is negated first.)
In auto-line mode, if the pty is in canonical mode, then @var{key}
is returned to DomTerm (using @code{"\e]74;" @var{key} "\a"});
otherwise @var{kchars} are sent to the pty.

@item @code{"\x92" "ALINK " @var{href} "\n"}
Sent by the DomTerm browser when the user clicks on an @code{<a>} link.
The backend should open @var{href} (which is JSON-encoded)
in the default browser of the user's desktop.
(In the future to better support remote desktops, the backend
should support a proxy server: The @var{href} should be resolved
based on the backend's environment.)

@item @code{"\x92" "RECEIVED " @var{count} "\n"}
This is used for flow-control.
The @var{count} is the number of bytes received and processed
by the front-end.

@item @code{"\x92" "SESSION-NAME " @var{session-name} "\n"}
Set @var{session-name} (a JSON-quoted string)
as the name for this session.

@item @code{"\x92" "DETACH\n"}
Don't destroy the session when the last window is closed;
instead detach it.
(Don't necessary detach now, if there are other windows on the session.)

@item @code{"\x92" "FOCUSED\n"}
The current (sub-)window has focus.

@item @code{"\x92" "WINDOW-CONTENTS " @var{rcount} "," @var{state} "\n"}
Report enough of the browser part of the session state so that
it can be reproduced when a window is sttached to the session.
The @var{state} is a JSON-encoded structure.
The @var{rcount} is similar to the value reported @code{RECEIVED},
but as of the start of teh most recent urgent message.

@item @code{"\x92" "VERSION " @var{version-info} "\n"}
Sends @var{version-info} to the back-end.  Used during initialization.
@end table

@node The DomTerm JavaScript class
@section The DomTerm JavaScript class

A DomTerm instance encapsulates the
state of a terminal emulator / console.

Functions and properties not documented here should be considered
internal and (more) likely to change.

@deftypefun new DomTerm (@var{name})
Create a new DomTerm instance.
The parameter @var{name} is a string.
If you have multiple DomTerm instances, it is a good idea
for the names to unique, but currently nothing depends on that.
@end deftypefun

@defun initializeTerminal (element)
Initialize the DomTerm, and associate it with the give @var{element}
(which should be a @code{<div>} element that has @code{class="domterm"}).
This creates the @ref{DOM structure,sub-structure} of child elements
of @var{element}.
@end defun

@defun insertString (str)
Interpret and insert the characters of @var{str}.
It may have ANSI/xterm @ref{Wire byte protocol,escape sequences}.
This method is called by the DomTerm client code.
@end defun

@defun eofSeen ()
This method is called by the DomTerm client code
to notify DomTerm that the client has terminated.
The backend repeatedly calls @code{insertString} and then
finally calls @code{eofSeen} to signal end-of-file.

This function may be overridden.
The default action is to call the @code{close} function of the current window.
@end defun

@defun processInputCharacters (str)
Send @var{str} to the client,
where @var{str} consists of typed characters and other events.
This is a callback function that must be set by the client.
This is called by the DomTerm code in @code{terminal.js}.
@end defun

@defun reportEvent (name, data)
Called by DomTerm to notify the client that some (non-character) event happened.
The default action calls @code{processInputCharacter}
with a special sequence starting with @code{"\x92"} followed
by the @var{name}, space, the @var{data} and a newline.
@end defun

@defun setWindowSize (numRows, numColumns, availHeight, availWidth)
Called by DomTerm when the window changes size, or the (font) style changes
so the number of rows or columns has changed.
Is used to notify the client.  The default behavior is to
call @code{reportEvent} with a @code{"WS"} event type.
@end defun

@defun doPaste ()
Handles a @code{paste} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand},
which triggers a @code{paste} event.
It is called by DomTerm if the user types Ctrl-Shift-V.
@end defun

@defun pasteText (text)
Called by the @code{paste} event handler.
Actually handle a paste event.
@end defun

@defun doCopy ()
Handles a @code{copy} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand}.
It is called by DomTerm if the user types Ctrl-Shift-C.
@end defun

@defun setInputMode (mode)
Set the input editing mode.
The value 99 (@code{'c'}) sets character mode
(each keystroke is sent to the client);
the value 108 (@code{'l')} sets line mode
(local line editing with a complete line sent on enter);
the value 97 (@code{'a'}) sets automatic mode
(switch between line and character modes depending on client pty state);
the value 112 (@code{'p'}) sets pipe mode
(like line mode but with local echoing).
@end defun

@defun doLineEdit (key, str)
Handle keyboard event when doing input line editing ourselves,
rather than depending on the default action.
This is used  if the @code{useDoLineEdit} property is set.
It is also used for the first character in automatic input editing mode.
(In that case we can't use the browser default action, since we
first have to check the input mode of the client.)
@end defun

@defun handleBell ()
Called when ctrl-G (the @code{bell} character) is seen.
The default action is to do nothing.
@end defun

@defun handleLink (event, href)
Called on a click event on a @code{<a>} link element.
The default action is to call @code{preventDefault} on the @var{event},
and then call @code{reportEvent} with an @code{"ALINK"} type event.
(We can't let the browser do its default action since that would
replace the current DomTerm page.)
@end defun

@defun setWindowTitle (title, option)
Set the title of the containing window.
Called by DomTerm when it sees certain @code{xterm}-style escape sequences.
Calls @code{updateWindowTitle(formatWindowTitle())}.
@end defun

@defun formatWindowTitle ()
Returns a suitable string for a window title,
based on various properies.
@end defun

@defun updateWindowTitle (title)
Actualy set the window title - which is usually the
result of @code{formatWindowTitle()}.
@end defun

@defun elementInfo (tag, parents)
Overridable function called by the HTML sanitizer.
@end defun

@defun allowAttribute (name, value elementInfo, parents)
Overridable function called by the HTML sanitizer.
@end defun

@node Processes and security
@section Processes and security

Normally, there is is a single per-user domterm server process.
When you run the @code{domterm} command it will look for a
domterm server process; if there is no running server, the
@code{domterm} commoand wil ``daemonize'' itself and become the server.
Otherwise, the @code{domterm} process will be a client,
and forward the requested action to the server.

Communication between a @code{domterm} client and a server
uses Unix domain dockets.  By default, this socket will
be bound to the file @code{.domterm/default.socket} in the user's
home directory.  We make use of Unix file permission to
ensure that the client and the server run on behalf of the same user.
(This could be generalized to allow groups to co-operate, by setting
permissions appropriately, but this has not been explored.)

When you run a new session, that creates a new user process,
under control of the domterm server.

The above client-server architecture is same as used by @code{tmux}.

The @dfn{front-end} is a separate program that handles the user interface.
It is a web browser or an application that embeds a web browser, like
Electron.  The domterm server is also a web server that
supports both http and the WebSockets protocols.
The domterm server forwards output from a user process
to the associated browser and vice versa: The server uses a pty
for the input/output of the user process, and forwards that input/output
to the browser using a websocket connection.  Normally, the server
creates a new browser instance, with a specified URL.  When
the corresponding page is loaded, the browser runs JavaScript that requests
a WebSocket connection with the server.

The obvious concern is that a different malicious browser might try
to establish a connection with the server, which would allow executing
arbitrary commands on behalf of the user.  To thwart that, the server
generates a 60-bit random key, and requires this server key to be present
in any connection attempts.  This means the browser JavaScript process
must know the server key when it creates a websocket connection.
The server must pass the key to the browser in a secure way.
A simple way is to pass the key along with the URL used to start
the browser, but that would typically require the key to be
part of the browser's command-line, which is not secure.
(It can can viewed with tools like @code{ps}.)

Instead, the server creates a new file @code{.domterm/default.html}
in the user's home directory, and uses that as the URL:
@example
$ $@{BROWSER@} "file://$@{HOME@}/.domain/default.html"
@end example
This file (only readable by the user) includes the following:
@example
DomTerm.server_key = '$@{SERVER_KEY@}';
@end example
The @code{$@{SERVER_KEY@}} is substituted when the file is created,
and used when the browser needs to make a websocket connection to the
server.
Again, we depend on Unix file permissions so only a process running
as the correct user can read @code{default.html}, extract the
server key, and make a valid connection back to the server.

Obviously, it could be very useful to handle networked connections,
with a browser on one machine managing a user process on another.
While one can always run @code{ssh}, this does not support
detaching from and re-attaching to a session smoothly.
For now, you have to use @code{ssh} in combination with @code{tmux}
or @code{screen}; we hope to have a smoother interface after studying
the issue. It would presumably use forwarding using ssh,
or @code{https}, or a combination.

@node Architecture notes
@section Architecture notes

@example
            --------------------
 Front-end  |  Display and keyboard
            |---------------
            |  Browser engine (runs terminal.js)
            |---------------
            |  Communication stub
            ---------------
              ^
              | Optional network
              V
            --------------------
  Back-end  |  Communication stub
            |---------------
            |  Application
            ---------------
@end example

The DomTerm architecture allows for multiple front-end
implementations and multiple back-end implementations.
The front-end runs the actual terminal emulator (written in JavaScript)
and manages the display. The front-end can be a window or tab in a
general-purpose browser like Firefox or Chrome, or it can be a
special-purpose browser optimized for DomTerm. The latter would drop
the URL bar, add a menu bar and other controls as more suitable
to a terminal emulator, and tweak a few minor security restrictions.

The back-end runs the actual application.
The application can be a general-purpose shell, or a custom application,
such as a programming language run-time or a chat server.
The back-end can run the application under a PTY.
Alternatively, the application can communicate using pipes,
if you prefer to avoid PTYs or they are unavailable (as on Windows).

The front-end and back-end can be combined in the same process,
using an embeddable browser.
he current @ref{Applications,sample applications}
include a single-process terminal emulator that uses the JavaFX WebEngine,
a JavaFX pop-up menu, and a PTY class.
In this case the ``communication stub'' is WebEngine's
bridge between JavaScript and Java, plus communicating with the PTY.
A C/C++ application could similarly use QtWebEngine
and its C++/JavaScript bridge.

If the front-end and back-end are separate processes, they can
communicate using a byte-stream protocol.
Currently we stick to well-formed UTF8, because JavaScript's
support for byte arrays is still weak.
The protocol is based on the xterm protocol: text and escape sequences
from the application to the front-end; keystrokes and encoded events
sent the other way.  More complex data can be encoded using JSON.
Most of protocol is handled by @code{terminal.js}.
The communications stubs may generate or intercept some messages:
For example a PTY stub will want to handle window size change events.

These data streams can be layered on top of other protocols,
such as telnet, ssh, or WebSocket.
Using WebSocket is convenient because it is built in to modern browsers,
so the entire front-end (except @code{terminal.js})
is readily available.

@subsection WebSocket server

The included server uses @uref{http://java-websocket.org/,Java-WebServer},
which is very compact and light-weight.
The @code{java_websocket.jar} is checked in for convenience
(though that may change).

Each connection to the server creates a new process, but using the
same @var{command} and @var{arg}s.
(Multiple connections using @code{--process} will fail for some
unknown reason.)

(An older WebSocket server uses libraries from the
@uref{https://tyrus.java.net/,Tyrus project}.
These libraries are much bigger, but this implementation
could be suitable for a JavaEE environment as it follows JSR-356.)

If using PTYs, which requires native code anyway, it may be better
to use a server written in C or C++, such as
@uref{https://libwebsockets.org/,libwebsockets}.

@subsection Line vs character input modes

In line input mode we can end up with double echoing:
As you edit the input line, it is displayed.
Then when the line is sent, the slave will normally echo the input.

Ideally you'd want to integrate with the kernel
terminal sub-system, to suppress echoing.   In lieu of
that, line editing mode could delete the input line
from the DOM before sending them to the inferior.
To avoid annoying flashing, this is done lazily:
DomTerm waits to remove the input line until it gets some
output from the inferior (usually the echo).

In addition to "char mode" and "line mode" (like the
Emacs term mode) there is an "auto mode" which watches
the states of the inferior pty to automatically switch
between them.  In autoEditing mode, if we're currently
in char mode, then a key event gets sent to the pty layer.
If the pty is in non-canonical mode, the key event is
sent to the server.  If the pty is in canonical mode, then
a message is sent back to the front-end, which switches
to line mode, and processes the event.

@subsection Line structure

"Line" here refer to "visual line": A section of the DOM that should be
treated as a line for cursor movement.  Line breaks may come from the
back-end, or be inserted by the line break algorithm.

The lineStarts array maps from a line number to the DOM location
of the start of the corresponding line.

The lineEnds array maps to the end of each line.
Always points to a span node with the line attribute set.
Normally lineEnds[i] == lineStarts[i+1]; however, sometimes
lineStarts[i] is the start of a @code{<div>} or other block element.

@subsection Colors and high-lighting

@emph{This needs updating.}

Escape sequences (for example @code{"\e[4m"} - "underlined", or
@code{"\e[32m"} - "set foreground color to green") are translated to
<span> elements with "@code{style}" attributes (for example
`<span style="text-decoration:underline">` or `<span style="color: green">`).
After creating such a `<span>` the current position is moved inside it.

If we've previously processed "set foreground color to green", and we
see a request for "underlined" it is easy to ceate a nested `<span>`
for the latter.  But what if we then see "set foreground color to red"?
We don't want to nest <span style="color: red">` inside
<span style="color: green">` - that could lead to some deep and
ugly nesting.  Instead, we move the cursor outside bot existing
spans, and then create new spans for red and underlined.

The `<span>` nodes are created lazily just before characters are
inserted, by `_adjustStyle`, which compares the current active styles
with the desired ones (set by `_pushStyle`).

A possibly better approach would be to match each highlight style into
a `class` attribute (for example `green-foreground-style` and
`underlined-style`).  A default stylesheet can map each style class to
the correspoding CSS rules.  This has the advantage that one could
override the highlighting appearance with a custom style sheet.

@subsection Line-breaking / pretty-printing

For a terminal emulator we need to preserve (not collapse) whitespace,
and (usually) we want to line-break in the middle of a word.

These CSS properties come close:
@example
white-space: pre-wrap; word-break: break-all
@end example
This is simple and fast.  However:
@itemize
@item
It doesn't help in inserting a visual indicator, like Emacs's arrow,
  to indicate when a line was broken.
@item
It doesn't help managing the line table.
@item
It doesn't help with pretty-printing (for example grouping).
@item
Chrome (version 52) seems to have from problems with @code{break-all}.
@end itemize

Hence we need to do the job ourselves.
