#!/bin/sh

help_general() {
  echo "dt-util: various utilities for working in DomTerm"
  echo "Usage: dt-util subcommand [options]"
  echo "Miscellaneous subcommands:"
  echo "  help [subcommand]"
  echo "  is-domterm - succeeds if running under DomTerm"
  echo "Subcommands for output:"
  echo "  html [or hcat] - display html"
  echo "  image [or img or imgcat] - display image"
  echo "  freshline - if not a beginning of inline, starts a fresh line"
  echo "Subcommands for styling:"
  echo "  reverse-video on|off - switch between dark or light background"
  echo "  list-stylesheets - list loaded stylesheets"
  echo "  print-stylesheet - print stylesheet rules from a loaded stylesheet"
  echo "  add-style - add a new rule to a temporary stylesheet"
}

help_imgcat() {
    echo 'Usage: image [--ATTRNAME=ATTRVALUE]... FILENAME'
    echo '"Print" the contents of the named image file to domterm.'
    echo 'This uses a "data:" URI with the file contents sent directly to domterm.'
    echo '--ATTRNAME=ATTRVALUE - specify the given attribute; for example: --height=200'
    echo 'Valid ATTRNAMEs: alt, longdesc, height, width, border, hspace, vspace, class'
}

help_hcat() {
    echo "Usage: html html-data..."
    echo "Each 'html-data' must be a well-formed HTML fragment"
    echo "If there are no arguments, read html from standard input"
}

help_is_domterm() {
  echo "Usage: dt-util is-domterm"
  echo "Succeeds if running on a DomTerm terminal; fails otherwise."
  echo "Typical usage: if dt-util is-domterm; then ...; fi"
}

probe_domterm() {
  # probe if TERM unset, or contains "xterm", or DOMTERM is set
  case "$TERM/$DOMTERM" in
    /* | *xterm*/* | */?*)
      echo -en "\e[>0c" >/dev/tty
      read -s -t 1 -d c </dev/tty
      case "${REPLY}" in
        ?"[>990;"*";"*) DOMTERM_REPLY="${REPLY}" ;;
        "") DOMTERM_REPLY="-timeout)" ;;
        *) DOMTERM_REPLY="-non-match"
      esac
      ;;
    *) DOMTERM_REPLY="-not-tried"
  esac
}

is_domterm() {
  test -z "$DOMTERM_REPLY" && probe_domterm
  case "$DOMTERM_REPLY" in
    -*) return -1;;
    *) return 0;;
  esac
}

get_domterm_dir() {
  thisfile=`type -p $0`
  case "$thisfile" in
    "") echo "installation error - can't find path to $0"; exit -1 ;;
    /*) ;;
    *) thisfile="$PWD/$thisfile"  ;;
  esac         
  while test -L "$thisfile"; do thisfile=$(readlink -f "$thisfile"); done
  DOMTERM_DIR=`echo $(dirname $thisfile) | sed -e 's|/bin$||'`
}

java_StyleSheet_app() {
  get_domterm_dir
  if test -n "$JAVA_HOME"; then
    JAVA="${JAVA_HOME}/bin/java"
  else
    JAVA=${JAVA-java}
  fi
  stty -F /dev/tty -echo
  $JAVA -cp "$DOMTERM_DIR/share/domterm/domterm.jar" org.domterm.util.StyleSheets "$@"
  stty -F /dev/tty echo
}

reverse_video() {
  case "$1" in
    "yes"|"on") echo -en '\e[?5h' ;;
    "no"|"off") echo -en '\e[?5l' ;;
    *)
      echo "reverse-video option must be on/off (or yes/no)"
      return -1;
      ;;
  esac
  return 0;
}

# Print contents of named image to domterm terminal.  See --help.
imgcat() {
  LAST_ECHO_ARG="-en"
  #LAST_ECHO_ARG="-e"
  ATTRIBUTES=""
  OVERFLOW_X="auto"

  while true
  do
  case $1 in
  "-n")
    LAST_ECHO_ARG="${LAST_ECHO_ARG}n"
    shift
    ;;
  "--width="* | "--height="* | "--border="* | "--align="* \
      | "--vspace="* | "--hspace="* | "--alt="* | "--longdesc="* \
      | "--class="* )
    attrname=`echo $1 | sed -e 's|--\(.*\)=.*|\1|'`
    attrvalue=`echo $1 | sed -e 's|--[a-z]*=\(.*\)|\1|'`
    ATTRIBUTES="$ATTRIBUTES $attrname='$attrvalue'"
    shift
    ;;
  "--overflow="*|"--overflow-x="*)
    attrvalue=`echo $1 | sed -e 's|--[a-z]*=\(.*\)|\1|'`
    OVERFLOW_X="$attrvalue"
    shift
    ;;
  "--help"|"-help"|"")
    help_imgcat
    return 0
  ;;
  "-"*)
    echo 'imgcat: Unrecognized option "'$1'"'
    imgcat --help
    ;;
  *)
    FILENAME="$1"
    if test -f "$FILENAME" && test -r "$FILENAME"
    then true
    else
       echo "imgcat: No such file: $FILENAME"
       return -1
    fi
    MIMETYPE=`file --brief --mime-type "$1"`
    echo -en "\e]72;<span style='display: block; overflow-x: ${OVERFLOW_X}'><img${ATTRIBUTES} src='data:${MIMETYPE};base64,"
    base64 $FILENAME
    echo $LAST_ECHO_ARG "'/></span>\a"
    return 0
    ;;
  esac
  done
}

case "$1" in
--force)
  shift
  ;;
is-domterm|help|--help)
  ;;
*)
  if is_domterm
  then true
  else
    echo "dt-util: don't seem to be running under DomTerm - use --force to force"
    exit -1
  fi
esac

case "$1" in
is-domterm)
  is_domterm
  exit $?
  ;;
html|hcat)
  shift
  if test $# = 0
  then
    echo -en "\e]72;"
    cat
    echo -en "\a"
  else
    for arg in "$@"; do
      echo -en "\e]72;$arg\a"
    done
  fi
  ;;
reverse-video)
  shift
  reverse_video "$@"
  ;;
image|img|imgcat)
  shift
  imgcat "$@"
  exit $?
  ;;
freshline|fresh-line)
  echo -en "\e[20u"
  exit 0
  ;;
list-stylesheets)
  shift
  java_StyleSheet_app --list "$@"
  exit $?
  ;;
add-style)
  shift
  java_StyleSheet_app --add-rules "$@"
  exit $?
  ;;
load-stylesheet)
  shift
  java_StyleSheet_app --load-stylesheet "$@"
  exit $?
  ;;
print-stylesheet)
  shift
  java_StyleSheet_app --print "$@"
  exit $?
  ;;
enable-stylesheet)
  shift
  java_StyleSheet_app --enable "$@"
  exit $?
  ;;
disable-stylesheet)
  shift
  java_StyleSheet_app --disable "$@"
  exit $?
  ;;
help | --help)
  case "$2" in
    image|img|imgcat) help_imgcat;;
    html|hcat) help_hcat;;
    is-domterm) help_is_domterm;;
    *) help_general;;
  esac
  exit 0
  ;;
*)
  echo "dt-util: unknown subcommand $1"
  help_general
  exit -1
esac
